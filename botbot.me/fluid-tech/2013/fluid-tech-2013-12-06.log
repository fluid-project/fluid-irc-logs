b'2013-12-06T13:25:43 * mrvisser has quit
2013-12-06T13:37:51 * mrvisser joined the channel
2013-12-06T13:38:21 * mrvisser_ has quit
2013-12-06T13:59:26 * mrvisser has quit
2013-12-06T14:06:11 * mrvisser joined the channel
2013-12-06T14:27:57 * clown joined the channel
2013-12-06T14:57:19 * kasparnet has quit
2013-12-06T14:57:51 * kasparnet joined the channel
2013-12-06T15:50:52 * colinclark joined the channel
2013-12-06T16:17:18 * jessm joined the channel
2013-12-06T16:40:48 * kasparnet has quit
2013-12-06T16:55:05 * kasparnet joined the channel
2013-12-06T16:57:11 * mrvisser has quit
2013-12-06T17:01:31 * kasparnet has quit
2013-12-06T17:03:12 * colinclark has quit
2013-12-06T17:08:14 * mrvisser joined the channel
2013-12-06T17:17:32 * michelled joined the channel
2013-12-06T17:42:25 * mrvisser_ joined the channel
2013-12-06T17:42:36 * mrvisser has quit
2013-12-06T18:34:49 * anvk joined the channel
2013-12-06T18:59:53 * colinclark joined the channel
2013-12-06T19:07:12 * michelled has quit
2013-12-06T19:08:06 * mrvisser joined the channel
2013-12-06T19:10:34 * mrvisser_ has quit
2013-12-06T19:47:22 * michelled joined the channel
2013-12-06T20:04:26 * michelled has quit
2013-12-06T20:08:00 * mrvisser_ joined the channel
2013-12-06T20:08:13 * mrvisser has quit
2013-12-06T20:12:26 * michelled joined the channel
2013-12-06T21:04:37 * anvk has quit
2013-12-06T21:25:42 * colinclark has quit
2013-12-06T21:37:09 * mrvisser_ has quit
2013-12-06T21:51:24 * mrvisser joined the channel
2013-12-06T22:15:03 * clown has left the channel
2013-12-06T22:25:45 * jessm has quit
2013-12-06T22:30:50 * michelled has quit
2013-12-06T22:43:18 * colinclark joined the channel
2013-12-06T23:19:18 * colinclark has quit
2013-12-06T23:56:17 * mrvisser has quit
'

b'2013-12-06T00:48:16 * colinclark joined the channel
2013-12-06T01:09:08 * colinclark has quit
2013-12-06T01:09:42 * colinclark joined the channel
2013-12-06T01:30:49 * mrvisser has quit
2013-12-06T01:33:08 <colinclark> Hey Bosmon
2013-12-06T01:33:13 <colinclark> quiet night here in the channel
2013-12-06T01:33:19 <colinclark> us and the two bots
2013-12-06T01:33:59 <colinclark> So we were talking about "live editing"
2013-12-06T01:34:05 <colinclark> I was asking about Code Mirror and its model for validation
2013-12-06T01:34:20 <colinclark> which you pointed it out that it largely doesn\'t have, and that I\'d have to look at writing my own "mode"
2013-12-06T01:34:49 <colinclark> i.e. a JSON parser, but in the somewhat unusual style of Code Mirror http://codemirror.net/doc/manual.html#modeapi
2013-12-06T01:34:59 <Bosmon> Hey, colinclark
2013-12-06T01:35:05 <Bosmon> Yes
2013-12-06T01:35:14 <Bosmon> Marijn\'s standard for parsers is, I think, quite reasonable
2013-12-06T01:35:23 <Bosmon> But it is one that no mainstream parsing technology can be held to
2013-12-06T01:35:34 <Bosmon> Least of all, those grammars generated by our "mainstream parsing tool", JISON
2013-12-06T01:35:36 <colinclark> a story we are familiar with :)
2013-12-06T01:35:37 <Bosmon> With its glorious lineage
2013-12-06T01:36:01 <colinclark> I should back up and describe what I\'d like to achieve
2013-12-06T01:36:09 <colinclark> since it\'s particularly related to Infusion in several ways
2013-12-06T01:36:24 <colinclark> I want to have, as part of the Flocking documentation, a small code window available with a pre-built example
2013-12-06T01:36:31 <colinclark> and a play/pause button
2013-12-06T01:36:45 <colinclark> as soon as the play button is activated, a Synth component will be instantiated
2013-12-06T01:37:20 <colinclark> from there, I\'d like the user to be able to make live changes to the synth and hear them without having to restart it or press the pause/play button to reset it
2013-12-06T01:37:36 <colinclark> this may, in practice, cause horrible noises at times :S
2013-12-06T01:37:43 <colinclark> but I\'d like to see how it works
2013-12-06T01:37:52 <Bosmon> At least, "Pleasingly inaccurate" noises : P
2013-12-06T01:37:56 <colinclark> let\'s hope
2013-12-06T01:37:57 <colinclark> :)
2013-12-06T01:38:36 <colinclark> Now, let\'s say I find that I\'ve got a valid JSON document from the user
2013-12-06T01:38:57 <colinclark> and want to take that and parse it into changes to the ChangeApplier
2013-12-06T01:39:26 <colinclark> Naively, I have been assuming that I\'d have to manually compare the old and new state of the synth\'s JSON
2013-12-06T01:39:33 <colinclark> using something like JSONDiff, maybe
2013-12-06T01:39:41 <Bosmon> Thankfully the "new ChangeApplier" can do this for you
2013-12-06T01:39:44 <colinclark> and then use that to compose up a set of ChangeApplier change requests
2013-12-06T01:39:45 <colinclark> oh!
2013-12-06T01:39:49 <colinclark> tell me more :) :)
2013-12-06T01:39:51 <Bosmon> It\'s not clever enough to spot moves
2013-12-06T01:40:03 <colinclark> What is a move, specifically?
2013-12-06T01:40:07 <Bosmon> But it will be enough to produce a basic set of "change events"
2013-12-06T01:40:17 <Bosmon> That is, it can\'t account for a change that consists of a JSON node being moved from place to place
2013-12-06T01:40:23 <Bosmon> But we don\'t really have infrastructure for that anyway
2013-12-06T01:40:30 <colinclark> ok, interesting
2013-12-06T01:40:33 <Bosmon> You will just get a create event in one place and a destroy in another
2013-12-06T01:40:38 <Bosmon> Or rather, the absence of something in another
2013-12-06T01:40:46 <colinclark> That should be fine in this case
2013-12-06T01:40:47 <Bosmon> Since it currently doesn\'t generate "DELETE" events either : P
2013-12-06T01:41:35 <Bosmon> Still, it will account for the difference in condition between one body of JSON and another, in terms of a "reasonably minimal" set of ChangeApplier events
2013-12-06T01:41:44 <Bosmon> Which the old ChangeApplier was completely incompetent at
2013-12-06T01:42:38 <colinclark> So, here\'s the simplest example of a Synth\'s "model": http://pastie.org/8532160
2013-12-06T01:42:49 <colinclark> I am quoting "model" because Synths in Flocking aren\'t yet modelized
2013-12-06T01:42:51 <colinclark> but now is the time :)
2013-12-06T01:43:29 <colinclark> I\'d actually like to only show the user of my little code editor the node inside "synthDef"
2013-12-06T01:43:34 <colinclark> and let them tweak taht
2013-12-06T01:44:12 <colinclark> So you\'re saying that I should be able to just make a change request containing the whole object at the "synthDef" path, and the ChangeApplier will split that out into individual changes
2013-12-06T01:44:29 <Bosmon> yes
2013-12-06T01:44:47 <Bosmon> "in theory" : P
2013-12-06T01:44:57 <colinclark> :)
2013-12-06T01:45:09 <colinclark> So, say the user edited the document to look like this: http://pastie.org/8532165
2013-12-06T01:45:24 <colinclark> My synth would receive two changes...
2013-12-06T01:45:37 <colinclark> one at path "freq", with a value of that new ugenDef object
2013-12-06T01:46:04 <colinclark> and another at path "mul," with the primitive number 0.25?
2013-12-06T01:46:12 <colinclark> "in theory," is that correct?
2013-12-06T01:46:35 <Bosmon> Well, the current applier will rebase changes to their "highest common path"
2013-12-06T01:46:49 <colinclark> Ah, what does that mean?
2013-12-06T01:46:51 <Bosmon> So in this case you would get a change rooted at "synthDef"
2013-12-06T01:47:11 <Bosmon> But you could still register interest at specific lower paths if you knew you were interested
2013-12-06T01:47:16 <colinclark> aha
2013-12-06T01:47:30 <colinclark> It\'s awkward
2013-12-06T01:47:35 <colinclark> it would probably work in this particular case
2013-12-06T01:47:41 <colinclark> but probably not globally
2013-12-06T01:47:42 <Bosmon> Certainly if you could come up with a heuristic for "fragmentation" that you were happy with, we could implement it : P
2013-12-06T01:47:56 <Bosmon> But it\'s hard to think of a very clear one that is a clear improvement over "highest common path"
2013-12-06T01:48:15 <colinclark> I think I\'m really just getting my head around the issue
2013-12-06T01:49:00 <colinclark> What will end up needing to happen, "in the other universe," is that an object roughly like this will need to get packaged up and sent to Flocking to actually change the value of the synth\'s inputs...
2013-12-06T01:49:03 <Bosmon> THe issue with "diff" algorithms it that they are not really constrained in the "quality of their efforts"
2013-12-06T01:49:19 <Bosmon> They could really spend an arbitrary amount of resources in coming up with "better diffs"
2013-12-06T01:49:30 <Bosmon> This is one of the reasons that the specific diff algorithm to be used isn\'t part of the git spec
2013-12-06T01:49:44 <colinclark> http://pastie.org/8532173
2013-12-06T01:50:30 <colinclark> ah, that\'s interesting
2013-12-06T01:53:24 <Bosmon> You have an extra "freq" now?
2013-12-06T01:53:35 <colinclark> yeah, that\'s Fm
2013-12-06T01:53:36 <colinclark> FM
2013-12-06T01:53:52 <colinclark> A sine wave modulating the frequency of another sine wave
2013-12-06T01:55:01 <Bosmon> aha
2013-12-06T01:55:40 <Bosmon> At least, in the case, they have just changed one parameter, you will get a small change event
2013-12-06T01:55:53 <Bosmon> In other cases, you might have to tear down more or less of the tree, depending on where the root is
2013-12-06T01:56:41 <colinclark> This might not be so bad
2013-12-06T01:56:58 <colinclark> As it stands today, Flocking SynthDefs tend to be pretty large trees
2013-12-06T01:57:10 <colinclark> So you can give particular nodes in the tree a "name"
2013-12-06T01:57:32 <colinclark> and then you can address changes to those ugens directly
2013-12-06T01:57:36 <colinclark> rather than needing a long EL path
2013-12-06T01:58:13 <colinclark> like this: http://pastie.org/8532187
2013-12-06T01:58:14 <Bosmon> Certainly it would be easy for you to undo one level of "fragmentation" yourself
2013-12-06T01:58:20 <Bosmon> If you knew it was at an important boundary
2013-12-06T01:58:23 <colinclark> yes
2013-12-06T01:58:29 <Bosmon> Anything greater than that probably would require the entire tree to be rebuilt
2013-12-06T01:58:38 <colinclark> I think I\'ll just look for named unit generators and listen for changes at those paths
2013-12-06T01:58:58 <colinclark> Assuming we\'re saying the same thing
2013-12-06T01:59:37 <Bosmon> Yes
2013-12-06T01:59:44 <colinclark> ok
2013-12-06T01:59:46 <Bosmon> Unless they destroy everything
2013-12-06T02:00:21 <colinclark> So will two changes always fire...
2013-12-06T02:00:28 <colinclark> hmm
2013-12-06T02:00:30 <colinclark> wait
2013-12-06T02:00:34 <colinclark> let me think through my question :)
2013-12-06T02:00:52 <colinclark> If I am listening to changes at the top level and at a specific sub-path
2013-12-06T02:01:02 <colinclark> I will always get two change events for each change, correct?
2013-12-06T02:01:58 <colinclark> assuming they make a change at a subpath, I mean
2013-12-06T02:02:03 <Bosmon> yes
2013-12-06T02:02:14 <colinclark> whereas if they blasted that subpath altogether
2013-12-06T02:02:26 <colinclark> I wouldn\'t--with the current implementation--I wouldn\'t get a DELETE
2013-12-06T02:02:36 <colinclark> I\'d simply find myself with only the change event at the top level?
2013-12-06T02:02:46 <Bosmon> You\'d still get a "change to undefined"
2013-12-06T02:02:49 <Bosmon> At the subpath
2013-12-06T02:02:56 <Bosmon> This is currently how DELETEs are represented
2013-12-06T02:03:13 <colinclark> ah, ok
2013-12-06T02:03:41 <colinclark> But I\'ll still have to do some coordination between the two different change events
2013-12-06T02:04:04 <colinclark> I\'m still a bit fuzzy
2013-12-06T02:04:32 <colinclark> I guess the other question, which I ask only as a curiosity...
2013-12-06T02:04:51 <colinclark> when will I be able to try these new features in the ChangeApplier out?
2013-12-06T02:05:03 <Bosmon> Yes well
2013-12-06T02:05:08 <Bosmon> My branch is currently "working"
2013-12-06T02:05:19 <Bosmon> And I don\'t think I have committed anything further broken to it : P
2013-12-06T02:05:27 <colinclark> interesting
2013-12-06T02:05:48 <colinclark> well, I guess I\'ll be taking a look, hopefully this weekend
2013-12-06T02:06:19 <Bosmon> cool
2013-12-06T02:07:02 <colinclark> My next question
2013-12-06T02:07:05 <colinclark> which I feel less cool about
2013-12-06T02:07:21 <colinclark> Currently, synths take this "synthDef" object as an option
2013-12-06T02:07:32 <colinclark> If I modelize this, it will have to move
2013-12-06T02:07:52 <colinclark> what does this mean for me and my users, practically?
2013-12-06T02:08:32 <colinclark> Is it completely horrendous to make an IoC reference to {that}.options.synthDef in my model block?
2013-12-06T02:09:24 <Bosmon> Doesn\'t seem too bad
2013-12-06T02:09:47 <Bosmon> You won\'t get any change support for anything which doesn\'t come from another model
2013-12-06T02:10:02 <Bosmon> But there may not be anything "model-like" on the other end in this case
2013-12-06T02:10:55 <colinclark> Can you elaborate?
2013-12-06T02:11:22 <Bosmon> In the "new system", anything referenced from a model remains connected to that model, via a ChangeApplier linkage
2013-12-06T02:11:52 <Bosmon> Eliminating the need for that dreadful thing we once called a "SuperApplier" : P
2013-12-06T02:13:17 <Bosmon> So, if you reference material from "options", it is transferred "one time only"
2013-12-06T02:13:41 <colinclark> ok
2013-12-06T02:13:45 <colinclark> I will have to think about what this means
2013-12-06T02:14:00 <colinclark> brb
2013-12-06T04:17:29 * colinclark has quit
2013-12-06T08:27:08 * the-t-in-rtf joined the channel
2013-12-06T09:20:44 * kasparnet joined the channel
2013-12-06T10:18:58 * kasparnet has quit
2013-12-06T10:23:15 * kasparnet joined the channel
2013-12-06T12:48:12 * mrvisser joined the channel
2013-12-06T13:25:25 * mrvisser_ joined the channel
'

