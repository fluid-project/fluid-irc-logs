b'2015-06-19T17:08:08 <Bosmon> Justin_o - it might
2015-06-19T17:08:12 <Bosmon> Although it\'s very unlikely
2015-06-19T17:08:24 <Justin_o> Bosmon: okay.. well good to know
2015-06-19T17:08:32 * sepideh joined the channel
2015-06-19T17:09:02 <Bosmon> Justin_o - "model" is currently treated "just like any other component member"
2015-06-19T17:09:23 <Bosmon> So you can expect that "options" has been fully evaluated, but the timing with respect to anything else in "members" or "components" is undefined
2015-06-19T17:09:48 <Justin_o> Bosmon: I was trying to avoid making changes to the real "fluid.textToSpeech" grade. Because the issue is only in the mockTTS
2015-06-19T17:09:51 <Justin_o> in the test
2015-06-19T17:10:02 <Justin_o> but i\'m not sure how i could deal with this particular issue any other way
2015-06-19T17:10:11 <Bosmon> Justin_o - you may unfortunately have to make changes, yes
2015-06-19T17:10:17 <Bosmon> Although hopefully harmless ones
2015-06-19T17:10:17 <Justin_o> :(
2015-06-19T17:10:41 <Bosmon> But the fact that the component\'s workflow becomes fatally disturbed if some operations are synchronous is worth being aware of in any case
2015-06-19T17:11:01 <Bosmon> You\'ve perhaps read up on the ongoing ZALGO "debate".....
2015-06-19T17:12:38 <Justin_o> Bosmon: no i haven\'t
2015-06-19T17:13:25 <Bosmon> This is what some people think about this issue: http://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/
2015-06-19T17:13:41 <Bosmon> I\'m not sure I/we agree, but it\'s well worth being aware of this opinion
2015-06-19T17:13:52 <Justin_o> Bosmon: thanks. i\'ll read that
2015-06-19T17:14:05 <Justin_o> Bosmon: by the way i commented out the modelListener and it still dies at the container
2015-06-19T17:14:21 <Bosmon> Justin_o - ok - please check it in and I can look at it later
2015-06-19T17:14:26 <Bosmon> Unfortunately I am heading out for the evening now
2015-06-19T17:14:42 <Bosmon> http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony - this is another useful piece of commentary that refers to the first link
2015-06-19T17:14:43 <Justin_o> Bosmon: okay thanks.. i\'ll keep plugging away for now and push up before i leave
2015-06-19T17:47:26 * colinclark has quit
2015-06-19T18:09:29 * kasparnet joined the channel
2015-06-19T18:11:54 * kasparnet has quit
2015-06-19T18:39:57 <Justin_o> Bosmon: i\'ve submitted a pull request https://github.com/fluid-project/infusion/pull/612 could you please take a look when you have a chance. The issue i had with the container seems to have been a result of grade merging :( so i had to put fluid.viewRelayComponent at the front.
2015-06-19T18:47:14 * sepideh has quit
2015-06-19T19:12:01 * anastasiac has quit
2015-06-19T19:18:33 * sepideh joined the channel
2015-06-19T19:18:39 * anastasiac joined the channel
2015-06-19T19:18:46 * cindyli joined the channel
2015-06-19T19:56:34 * the-t-in-rtf has quit
2015-06-19T19:57:09 * the-t-in-rtf joined the channel
2015-06-19T20:04:15 * cindyli has quit
2015-06-19T20:13:05 * the-t-in-rtf has quit
2015-06-19T20:15:59 * the-t-in-rtf joined the channel
2015-06-19T20:21:51 * michelled has quit
2015-06-19T20:40:43 * jhung has quit
2015-06-19T20:49:40 * the-t-in-rtf has quit
2015-06-19T20:53:52 * kasparnet joined the channel
2015-06-19T21:01:16 * the-t-in-rtf joined the channel
2015-06-19T21:02:10 * clown has quit
2015-06-19T21:04:44 * sepideh has quit
2015-06-19T21:13:05 * anastasiac has quit
2015-06-19T21:27:49 * Jess_ has quit
2015-06-19T21:47:58 * Justin_o has quit
2015-06-19T23:03:34 * murilocrivellari has quit
'

b'2015-06-19T14:57:39 <colinclark> Does that make sense?
2015-06-19T14:57:45 <Justin_o> colinclark: yep
2015-06-19T14:58:00 <colinclark> So, now, the question falls to what is currently sitting in master
2015-06-19T14:58:25 <colinclark> I think I agree with Bosmon\'s idea that we "mark" something representing the end of the current iteration of Infusion
2015-06-19T14:58:37 <colinclark> and I suspect we should just break the rules a bit here
2015-06-19T14:59:02 <colinclark> In the best case scenario, I\'d love to actually cut a release, but I think michelled will have a few things to say about that idea
2015-06-19T14:59:24 <colinclark> I\'d propose simply calling it Infusion 1.9, despite the fact that there are arguably some breaking changes in there
2015-06-19T14:59:40 <colinclark> so assuming we don\'t yet have time to cut this release, then we\'d just make a 1.9.x branch
2015-06-19T15:00:27 <colinclark> And then master will move on to being the 2.0 line, and we\'ll more radically shed some of our past weight
2015-06-19T15:00:50 <colinclark> such as demands blocks, autoInit declarations, the lifecycle functoins like finalInit, etc.
2015-06-19T15:01:19 <colinclark> The point of calling it 1.9 is sort of "spiritual" rather than "legislative" if that makes sense
2015-06-19T15:01:28 <Justin_o> Bosmon: do you know if there currently is anything that breaks backwards compatibility in master?
2015-06-19T15:01:43 * kasparnet has quit
2015-06-19T15:02:13 <Justin_o> I\'m assuming this would count http://docs.fluidproject.org/infusion/development/APIChangesFrom1_5To2_0.html
2015-06-19T15:02:38 <Bosmon> Justin_o - yes, but most of those haven\'t happened yet
2015-06-19T15:02:52 <Bosmon> Apart from the change to fluid.prefs.enactor : P
2015-06-19T15:02:58 <Justin_o> colinclark: i mean, i know that might make sense now and to us, but i don\'t know if that will make sense in a couple years, and to others.
2015-06-19T15:03:15 <colinclark> what will/won\'t make sense, Justin_o?
2015-06-19T15:03:43 <Justin_o> that we diverged, for one "release" from our versioning
2015-06-19T15:04:09 <Bosmon> Justin_o - I think we\'re just talking about the name of a branch - rather than a release
2015-06-19T15:04:24 <colinclark> Bosmon: I\'m not sure there is much of a difference
2015-06-19T15:04:24 <Bosmon> And I\'m perfectly happy for it to be called 1.x-last, or toasted-cheese, or indeed anything at all : P
2015-06-19T15:04:37 <Bosmon> Just something that will remind someone who looks at it what its purpose is
2015-06-19T15:04:40 <Justin_o> toasted-cheese sounds yummy
2015-06-19T15:04:51 <colinclark> I was actually proposing that whatever we do, it should enable us--at least in theory--to cut an "end of an era" release
2015-06-19T15:05:03 <Bosmon> ok
2015-06-19T15:05:08 <colinclark> I just can\'t imagine that 1.x-last means much to people, and it makes it hard to actually cut a release
2015-06-19T15:05:12 <colinclark> were we to do so
2015-06-19T15:05:18 <colinclark> perhaps I\'m actually being pedantic here
2015-06-19T15:05:24 <Bosmon> Well, if that release HAD a number, it could in theory only logically be 1.6 or 1.9 or so
2015-06-19T15:05:33 <Bosmon> If we are proposing to move along to 2.0.0 immediately
2015-06-19T15:05:45 <Justin_o> colinclark: so i guess i\'m fine with the branch provided that we don\'t actually cut a release unless it is in fact backwards compatible
2015-06-19T15:06:06 <Bosmon> Re Justin_o\'s earlier question, I can\'t quickly be completely sure about how many documented API changes are in current master with respect to 1.5
2015-06-19T15:06:12 <colinclark> The only atlernative I can think of is to tag what\'s in master as 2.0 and move on to 3.0.0 immediately
2015-06-19T15:06:20 <Bosmon> But my sense is that the current state of master represents less of a breaking change with 1.5 than 1.5 did with 1.4
2015-06-19T15:06:28 <colinclark> So basically here is my challenge to us:
2015-06-19T15:06:45 <colinclark> How do we reflect the fact that what\'s in master represents the end of our current line of Infusion?
2015-06-19T15:06:59 <colinclark> And how can we do so in a manner that would allow us, should we choose to, to actually cut a release of it?
2015-06-19T15:07:13 <colinclark> We have three options that we\'ve articulated
2015-06-19T15:07:21 <colinclark> 1. Give it a funny name and explain why to people
2015-06-19T15:07:22 <Bosmon> Most of what has happened in master since 1.5 represents either bug fixes, or improvements to unstable functionality like fluid.modelRelayComponent, or introduction of entirely new APIs such as fluid.promise.*
2015-06-19T15:07:29 <colinclark> 2. Call it 1.9 even though it has some breakage
2015-06-19T15:07:36 <colinclark> 3. Call it 2.0.0 and move on immediately to 3.0.0
2015-06-19T15:08:09 <colinclark> I can say as a fairly heavy downstream user of Infusion, I\'ve tracked master to the latest revision without breakage
2015-06-19T15:08:29 <colinclark> and as such a user, I desperately want to have a very clear place to go to get my version of Infusion until I\'m ready to upgrade to 2.0.0
2015-06-19T15:08:53 <Justin_o> colinclark: i think the prefsFramework would be the problem at this point.. but probably only if you tried to use it instead of say, UIO.
2015-06-19T15:09:54 <Bosmon> Have we advertised anywhere what the status of the prefsFramework API is?
2015-06-19T15:10:04 <Bosmon> That is, whether it represents a sneak peak or unstable functionality?
2015-06-19T15:10:32 <Justin_o> colinclark: so i\'m more comfortable with option 2, but as a branch.. where we could fix up backwards compatibility issues before we cut an actual release, if that ever actually happens.
2015-06-19T15:10:45 <Bosmon> colinclark - I\'m happy with option 2 as a branch as well
2015-06-19T15:10:49 <Justin_o> Bosmon: i\'m not sure, but we have documented it
2015-06-19T15:11:39 <michelled> colinclark, simonjb: are you available now?
2015-06-19T15:12:06 <simonjb> michelled: yep, good for me
2015-06-19T15:12:08 <colinclark> michelled: assuming Bosmon and Justin_o are converging on agreement, yes :)
2015-06-19T15:13:26 <michelled> simonjb, colinclark: let\'s meet in the fluid-standup vidyo room
2015-06-19T15:16:24 <colinclark> Justin_o, Bosmon: So I\'m happy with any of the three options
2015-06-19T15:16:35 <colinclark> with slightly less enthusiasm for #3
2015-06-19T15:17:00 <Justin_o> colinclark: i think we are... so if we do the branch we should do 1) branch before thehttps://github.com/fluid-project/infusion/pull/591 is merged. 2) clean up jira to update the fix for versions from 2.0 to 1.9 for all those other jiras that have already been closed as fixed for 2.0
2015-06-19T15:17:31 <Bosmon> Justin_o - looks good
2015-06-19T15:19:12 <Justin_o> Bosmon, colinclark: cool.. i think we\'ve got it all settled :)
2015-06-19T15:19:36 <Justin_o> Bosmon: did you have a chance to look at the issue i was having with the mockTTS
2015-06-19T15:20:46 <Bosmon> Justin_o - yes
2015-06-19T15:20:51 <Bosmon> Your mockTTS issue is a variant of https://issues.fluidproject.org/browse/FLUID-5519
2015-06-19T15:21:30 <Bosmon> The problem is that the initial model transaction is trying to cause an "onStop" notification before the MockTTS component has actually instantiated
2015-06-19T15:21:45 <Justin_o> Bosmon: ah :(
2015-06-19T15:21:54 <Justin_o> Bosmon: is there a possible work around?
2015-06-19T15:22:23 <Bosmon> Justin_o - looks like there is a model change of "enabled: false" being propagated
2015-06-19T15:23:04 * sepideh has quit
2015-06-19T15:23:24 <Justin_o> Bosmon: that\'s weird, because it\'s set to true in the test component definition
2015-06-19T15:24:37 <Bosmon> I see three models being merged together to produce the complete initial value
2015-06-19T15:25:09 <Bosmon> The first one has {enabled: true, utteranceOpts: {volume: 0 }}
2015-06-19T15:25:21 <Bosmon> The second has { utteranceOpts: {}}
2015-06-19T15:25:27 <Bosmon> The 3rd has {enabled: false}
2015-06-19T15:25:40 <Justin_o> which direction are those merging in?
2015-06-19T15:25:50 <Justin_o> the first one is the one from the test file
2015-06-19T15:26:04 <Bosmon> The later models take priority
2015-06-19T15:26:22 <Bosmon> Justin_o - the 3rd one is also from the test file
2015-06-19T15:26:33 <Bosmon> it\'s the defaults you wrote in "fluid.tests.prefs.enactor.selfVoicingEnactor"
2015-06-19T15:27:14 <Justin_o> Bosmon: right, that\'s the second set of tests
2015-06-19T15:27:22 <Bosmon> Justin_o - there are a few workarounds for the init problem
2015-06-19T15:27:25 <Justin_o> so yes, for that one, the false state should take priority
2015-06-19T15:27:32 <Bosmon> One way is to write excludeSource: "init" on the modelListener in question
2015-06-19T15:27:34 <Bosmon> http://docs.fluidproject.org/infusion/development/ChangeApplierAPI.html#source-tracking-and-filtering-in-model-listener-blocks
2015-06-19T15:28:06 <Bosmon> Another way is to ensure that you pass IoC references directly as arguments of any invokers affected - if this allows the functionality to work
2015-06-19T15:28:10 <Bosmon> As in {that}.record etc.
2015-06-19T15:28:32 <Bosmon> The final, most distasteful way is to just write an "if" statement guarding any logic that mustn\'t execute before the component is initialised
2015-06-19T15:28:44 <Bosmon> So, you can work through these options in order of desirability
2015-06-19T15:28:57 <Bosmon> This will be one of the first issues fixed in the 2.0.0 branch once work can start on it
2015-06-19T15:29:24 <Justin_o> Bosmon: okay.. cool thanks.. i\'ll try those out
2015-06-19T15:29:33 <Justin_o> Bosmon: thanks for looking into a fix for this issue :)
2015-06-19T15:29:55 <Bosmon> Justin_o - I think I\'ve been "looking into it" for at least a year now : P
2015-06-19T15:30:25 <Bosmon> Well... the JIRA isn\'t quite a year old yet
2015-06-19T15:31:32 <Justin_o> that\'s only like 8 months
2015-06-19T15:32:48 <gtirloni> is standup happening in the collab room today?
2015-06-19T15:34:06 <gtirloni> yep
2015-06-19T15:57:34 * colinclark has quit
2015-06-19T16:02:24 * jessm has quit
2015-06-19T16:18:36 * cindyli has quit
2015-06-19T16:18:59 * cindyli joined the channel
2015-06-19T16:21:39 <Justin_o> Bosmon: for jqUnit.assertDeepEq should {a: "a"} and {a: "a", b: undefined} be equivalent?
2015-06-19T16:28:32 * sepideh joined the channel
2015-06-19T16:30:29 * colinclark joined the channel
2015-06-19T16:37:16 * sepideh has quit
2015-06-19T16:37:42 * simonjb has quit
2015-06-19T16:41:55 * sepideh joined the channel
2015-06-19T16:43:00 <Bosmon> Justin_o - I couldn\'t say :)
2015-06-19T16:43:47 <Justin_o> Bosmon: so it produced a failure for me.. but i wonder if that\'s what it should do or not?
2015-06-19T16:44:09 <Justin_o> i\'m not really sure, i mean i guess they are somewhat different in that the latter has a property that the former doesn\'t.
2015-06-19T16:44:11 <Bosmon> Justin_o - there are good arguments on either side
2015-06-19T16:44:48 <Bosmon> But given that we now have fluid.model.diff which would compare values with JSON-semantics, it would seem better for jqUnit.assertDeepEq to operate the more strict rules
2015-06-19T16:45:16 <Justin_o> Bosmon: ah okay
2015-06-19T16:45:37 * kasparnet joined the channel
2015-06-19T16:45:47 * Jess_ joined the channel
2015-06-19T16:45:56 <Justin_o> Bosmon: i was finding that if i set up an object in an IoC testing tree to have undefined values though, it would come back without the property. so my tests were failing
2015-06-19T16:46:04 <Justin_o> because i couldn\'t properly setup the expected case
2015-06-19T16:46:33 <Justin_o> i\'ve worked around it by not saving undefined values in the "actual" record
2015-06-19T16:47:45 <Bosmon> Justin_o - that seems like a reasonable approach
2015-06-19T16:48:02 <Bosmon> Another way of treating the problem might have been to use the variant asserter jqUnit.assertCanoniseEqual: https://github.com/fluid-project/infusion/blob/master/tests/test-core/jqUnit/js/jqUnit.js#L228
2015-06-19T16:48:13 * sepideh has quit
2015-06-19T16:48:22 <Bosmon> That is, you could produce a standard function which canonicalises two object trees by removing any properties with undefined values
2015-06-19T16:50:50 <Justin_o> Bosmon: oh interesting.. so there is a way around if can\'t modify the "actual" object
2015-06-19T16:50:53 <Justin_o> that\'s cool
2015-06-19T16:50:58 <Bosmon> Justin_o - yup
2015-06-19T16:51:57 <Bosmon> This is used in various places that, for example, want all function handles to compare equal to each other, or for the order of array elements to be unimportant
2015-06-19T16:52:07 <Bosmon> But there are no doubt numerous other uses
2015-06-19T16:52:34 * kasparnet has quit
2015-06-19T16:53:01 <Justin_o> Bosmon: that\'s useful, i don\'t think i had noticed it before
2015-06-19T16:54:06 <Justin_o> Bosmon: so i\'m having another issue now with that second test.. it seems to think there is no container, despite the fact that a selector is supplied to the tree, which corresponds to an element in the DOM, and the tests had been working
2015-06-19T16:54:24 <Justin_o> Bosmon: the error is "Cannot read property \'constructor\' of undefined"
2015-06-19T16:54:37 <Justin_o> from FluidView.js line 145
2015-06-19T16:54:48 <Justin_o> var userJQuery = container.constructor;
2015-06-19T16:56:02 <Bosmon> Justin_o - yes - looks like the container must indeed have evaluated to undefined
2015-06-19T16:57:06 <Justin_o> Bosmon: yes, it has but i don\'t understand how that could have been corrupted
2015-06-19T16:57:10 <Justin_o> it\'s in the DOM
2015-06-19T16:57:20 <Justin_o> there\'s not markup fetching
2015-06-19T17:01:05 <Bosmon> Justin_o - the only thing that I imagine has changed is the asynchrony
2015-06-19T17:03:32 <Bosmon> So I wonder which container appears to be empty -
2015-06-19T17:03:35 <Bosmon> is it this one? https://github.com/fluid-project/infusion/blob/40fe70eda2899e887de74082383b4018a7bf8f4e/tests/framework-tests/preferences/js/SelfVoicingEnactorTests.js#L168
2015-06-19T17:05:31 <Justin_o> Bosmon: yes, that\'s the one with the problem.
2015-06-19T17:05:36 <Bosmon> I expect that this is just the same issue as before
2015-06-19T17:05:38 <Justin_o> did you want me to push up my latest code
2015-06-19T17:05:50 <Justin_o> Bosmon: that effects the container too?
2015-06-19T17:05:58 <Justin_o> i would have thought that resolves first
2015-06-19T17:06:02 <Bosmon> Justin_o - it will affect all timing issues
2015-06-19T17:06:12 <Justin_o> Bosmon: because it is a subcomponent?
2015-06-19T17:06:26 <Bosmon> Justin_o - currently the initial transaction can occur at essentially any time during a component\'s construction
2015-06-19T17:06:36 <Bosmon> Until we have the new framework, we just can\'t control it at all
2015-06-19T17:06:44 <Bosmon> Justin_o - because it is anything : P
2015-06-19T17:07:13 <Justin_o> Bosmon: but that wouldn\'t happen when initializing a component like fluid.someCompent(container, options).
2015-06-19T17:07:15 <Justin_o> right?
'

b'2015-06-19T00:05:00 * jhung joined the channel
2015-06-19T00:05:01 * jhung has quit
2015-06-19T00:29:55 * yzen joined the channel
2015-06-19T06:58:11 * the-t-in-rtf joined the channel
2015-06-19T10:16:48 * kasparnet joined the channel
2015-06-19T11:54:58 * jhung joined the channel
2015-06-19T12:24:14 * Justin_o joined the channel
2015-06-19T12:32:52 * anastasiac joined the channel
2015-06-19T12:35:18 * jhung has quit
2015-06-19T12:37:20 * jhung joined the channel
2015-06-19T12:37:30 * yzen joined the channel
2015-06-19T12:43:47 * yzen is now known as yzen_
2015-06-19T12:46:53 * cindyli joined the channel
2015-06-19T13:00:03 * sepideh joined the channel
2015-06-19T13:01:40 * simonjb joined the channel
2015-06-19T13:04:36 * colinclark joined the channel
2015-06-19T13:05:23 <colinclark> morning, simonjb
2015-06-19T13:05:39 <simonjb> hi colinclark
2015-06-19T13:06:36 <simonjb> colinclark: did you see the email from Bosmon? he\'s running about 20 mins late for the meeting
2015-06-19T13:06:49 <colinclark> oh, ok
2015-06-19T13:13:39 * jessm joined the channel
2015-06-19T13:17:34 * gtirloni joined the channel
2015-06-19T13:28:01 <Bosmon> hi guys
2015-06-19T13:28:06 <Bosmon> colinclark, simonjb, kasparnet
2015-06-19T13:28:23 <simonjb> hi all
2015-06-19T13:28:31 <simonjb> are we good to go?
2015-06-19T13:29:08 <colinclark> sure!
2015-06-19T13:29:59 <Bosmon> Where are we
2015-06-19T13:30:24 <simonjb> let\'s meet in my room on vidyo
2015-06-19T13:33:53 <Bosmon> Here\'s a great recent blog posting from the IMMORTAL **KELLS** on how type-safety fights the aims of type-safety: http://www.cl.cam.ac.uk/~srk31/blog/research/type-safety-and-observability.html
2015-06-19T13:35:18 * yzen joined the channel
2015-06-19T14:02:01 * clown joined the channel
2015-06-19T14:20:22 <Justin_o> Bosmon: i\'m working on https://issues.fluidproject.org/browse/FLUID-5675
2015-06-19T14:21:11 <Justin_o> the mock i wrote uses fluid.textToSpeech as a base grade and replaces the methods that use the browsers\'s speechSynthesis
2015-06-19T14:21:43 <Justin_o> now i want to use this to re-write the selfVoicingEnactor tests
2015-06-19T14:22:47 <Justin_o> However, the selfVoicing enactor also uses fluid.textToSpeech as a base grade, and I\'m having a bit of difficulty overriding it..
2015-06-19T14:23:08 <Justin_o> i\'ve added these gradeNames to the test version of the speakEnactor
2015-06-19T14:23:09 <Justin_o> gradeNames: ["fluid.mock.textToSpeech", "fluid.prefs.enactor.speak", "autoInit"],
2015-06-19T14:23:36 <Justin_o> but when done like this i\'m missing the members that i define in the test speakEnactor
2015-06-19T14:23:53 <Justin_o> if add the grades like gradeNames: ["fluid.prefs.enactor.speak", "fluid.mock.textToSpeech", "autoInit"],
2015-06-19T14:24:06 * murilocrivellari joined the channel
2015-06-19T14:24:08 <Justin_o> the methods from the mock don\'t override the fluid.textToSpeech
2015-06-19T14:24:16 <Justin_o> Bosmon: any thoughts?
2015-06-19T14:28:06 <Bosmon> Justin_o - recall that grades earlier in the list override the ones that are later
2015-06-19T14:28:18 <Bosmon> So the first form you have written is correct
2015-06-19T14:28:45 <Justin_o> Bosmon: okay, thanks.. but why would the members not be available anymore?
2015-06-19T14:28:58 <Bosmon> Justin_o - perhaps because you overrode them?
2015-06-19T14:29:10 <Justin_o> i\'m guess there may be a timing issue with the mock as it is not asynchronous like the real implementation
2015-06-19T14:29:18 <Justin_o> Bosmon: the member names are different
2015-06-19T14:29:23 <Justin_o> shouldn\'t they merge?
2015-06-19T14:29:26 <Bosmon> Justin_o - yes
2015-06-19T14:29:32 <Bosmon> Can you give an example of members which are not there?
2015-06-19T14:29:54 <Bosmon> simonjb - colinclark - any conclusions from the P4A meeting?
2015-06-19T14:30:19 <Justin_o> Bosmon: these ones https://github.com/fluid-project/infusion/blob/master/tests/framework-tests/preferences/js/SelfVoicingEnactorTests.js#L26-L29
2015-06-19T14:30:39 <Justin_o> Bosmon: basically the tests get an error here https://github.com/fluid-project/infusion/blob/master/tests/framework-tests/preferences/js/SelfVoicingEnactorTests.js#L72-L74
2015-06-19T14:31:54 * michelled joined the channel
2015-06-19T14:32:40 <Bosmon> Justin_o - presumably the ones in trunk pass
2015-06-19T14:32:45 <Bosmon> Can you point me to the ones that you have that fail?
2015-06-19T14:33:13 <Justin_o> Bosmon: sure, i haven\'t committed them yet.. but i\'ll do that now
2015-06-19T14:34:01 <simonjb> Bosmon: I don\'t think we covered anything new after you left us -- just wrapping up really; we will meet with them on Monday and learn more about their thoughts and timelines
2015-06-19T14:34:18 <Bosmon> Thanks, simonjb
2015-06-19T14:35:52 <Justin_o> Bosmon: here are the changes https://github.com/fluid-project/infusion/compare/master...jobara:FLUID-5675?expand=1
2015-06-19T14:37:02 <colinclark> hey Justin_o and Bosmon, is now an okay time to ask some questions about your versioning thread?
2015-06-19T14:37:48 <Justin_o> colinclark: sure
2015-06-19T14:38:06 <colinclark> Ok, first question...
2015-06-19T14:38:21 <colinclark> As of Infusion 1.5, did we confrom to semver?
2015-06-19T14:39:02 <colinclark> conform
2015-06-19T14:39:16 <Bosmon> I would say not, since 3 version components are required
2015-06-19T14:39:57 <Justin_o> Bosmon, colinclark: https://github.com/fluid-project/infusion/blob/infusion-1.5/package.json#L4
2015-06-19T14:40:13 <Bosmon> ah wow! : P
2015-06-19T14:40:14 <Justin_o> the package file is correct.. i guess you could argue that the tag name isn\'t
2015-06-19T14:40:38 <colinclark> Semantically, did we?
2015-06-19T14:40:49 <colinclark> In other words, the definitions about backwards compatibility, etc.?
2015-06-19T14:41:10 <Bosmon> Since we made only one release, it would be hard to tell
2015-06-19T14:41:28 <Justin_o> colinclark: i believe so, i mean ours has always been pretty close except for our 4 part versions, which we probably only had one of
2015-06-19T14:41:42 <colinclark> ok
2015-06-19T14:41:49 <Bosmon> If 1.4.0 had existed and also been semver compatible, I would say that the API changes there would still probably have counted as being non-backwards compatible
2015-06-19T14:41:53 <colinclark> Master contains breaking API changes from 1.5?
2015-06-19T14:42:20 <Bosmon> colinclark - well, I guess the definition of this would depend on the quality of our documentation
2015-06-19T14:42:28 <Bosmon> Which has not really been good
2015-06-19T14:42:42 <colinclark> can you elaborate, Bosmon?
2015-06-19T14:43:12 <Bosmon> Well, semver is clear that the breakingness of an API change has to be referred to the documentation for that API
2015-06-19T14:43:35 <colinclark> ah
2015-06-19T14:43:39 <Bosmon> http://docs.fluidproject.org/infusion/development/APIChangesFrom1_4To1_5.html
2015-06-19T14:43:49 <Bosmon> I guess it\'s good enough to be clear that we made breaking API changes
2015-06-19T14:43:53 <Justin_o> here\'s our versioning scheme.. the prior one is also listed there https://wiki.fluidproject.org/display/docs/Fluid+Versioning+Scheme
2015-06-19T14:44:09 <Bosmon> Renaming "expander" to "transform" by itself would do that
2015-06-19T14:44:23 <Justin_o> i guess we weren\'t officially semver compliant before, but you can see that the definition is almost identical.
2015-06-19T14:45:51 <Justin_o> Bosmon: i thought that was a sneak peak feature in 1.4 though.. i believe we have said we wouldn\'t maintain backwards compatibility for those.. although that\'s pretty confusing in reality
2015-06-19T14:46:03 <Bosmon> ok
2015-06-19T14:46:33 <Bosmon> I guess we\'re allowed to have "unstable APIs"
2015-06-19T14:46:40 <colinclark> So it sounds like the answer to the backwards compatibility question is suitably muddy, and not necessarily in a bad way
2015-06-19T14:46:51 <Bosmon> Although in practice, perhaps, node.js for example only gets away with this because it has never declared 1.0
2015-06-19T14:47:07 <colinclark> My impression is that this discussion has less to do with deciding if we\'re following the rules correctly
2015-06-19T14:47:08 <Justin_o> Bosmon, colinclark: regardless of the outcome of this conversation, we should probably avoid putting "sneak peak" stuff in the actual package until we are ready to support backwards compatibility.. i\'m not sure what "avoid" means exactly though
2015-06-19T14:47:26 <Bosmon> Justin_o - that seems sort of impossible
2015-06-19T14:47:36 <colinclark> it does seem very difficult
2015-06-19T14:47:42 <colinclark> This has more to do with finding a way to signal "the end of an era"
2015-06-19T14:47:46 <Justin_o> Bosmon: i guess i mean, we should keep it aside in a way.. which would be easier to do with a better build system
2015-06-19T14:47:53 <colinclark> My impression is that, with 2.0.0, we will change some basic practices
2015-06-19T14:47:55 <Bosmon> Justin_o - I think that would still be effectively impossible
2015-06-19T14:48:10 <colinclark> including bumping major version numbers more regularly
2015-06-19T14:48:16 <Justin_o> Bosmon: i guess the other option would be to not release till the code is ready then
2015-06-19T14:48:29 <colinclark> That doesn\'t seem very practical, Justin_o
2015-06-19T14:48:39 <colinclark> in the sense that, given the nature of Infusion\'s goals...
2015-06-19T14:48:40 <Justin_o> colinclark: we could do pre-releases
2015-06-19T14:48:47 <Bosmon> Justin_o - I imagine there will be a fairly long road to 2.0.0, yes - but I believe we had decided to release a series of 2.0.0-alpha.x releases
2015-06-19T14:48:52 <Justin_o> colinclark: or as you say bump major releases more often
2015-06-19T14:49:10 <colinclark> Well, I guess the problem is one of time scales
2015-06-19T14:49:24 <colinclark> our framework is trying to do something no else wants to do
2015-06-19T14:49:39 <colinclark> which means we make a lot of mistakes and have to do a lot of sketching along the way
2015-06-19T14:50:02 <colinclark> my impression is that the best way to support this in the long run is to have a version number that looks a lot more like a browser\'s version number these days :)
2015-06-19T14:50:05 <colinclark> If you see what I mean
2015-06-19T14:50:22 <colinclark> i.e. to recognize that Infusion changes as our research evolves
2015-06-19T14:50:42 <Bosmon> colinclark - yes, I think it is inescapable that we will end up with very large version numbers
2015-06-19T14:50:42 <colinclark> where our research is grounded in practice--actually using features that are speculative and still emerging
2015-06-19T14:50:59 <colinclark> We\'re not Angular.js
2015-06-19T14:51:00 <Justin_o> colinclark: i think that\'s fine, but if we say we are using semver then we have to work within its constraints.. so pre-releases and major version bumps would be fine, but breaking backwards compatibility in point releases wouldn\'t
2015-06-19T14:51:02 <colinclark> on purpr\x08ose, we\'re not
2015-06-19T14:51:15 <colinclark> Justin_o: Right, sure, we need to follow the rules
2015-06-19T14:51:18 <colinclark> but that\'s the point I\'m making
2015-06-19T14:51:52 <colinclark> we might well be on Infusion version 43.0.2357 in the next year or two :)
2015-06-19T14:52:01 <Justin_o> colinclark: yah.. i think we\'re agreeing on the future, so to speak
2015-06-19T14:52:06 <colinclark> cool
2015-06-19T14:52:08 <Bosmon> Even after we get to a theoretical "2.0.0" I think we will be making what qualify as breaking API changes regularly for quite some while
2015-06-19T14:52:12 <Bosmon> Especially as our documentation improves
2015-06-19T14:52:14 <colinclark> yep
2015-06-19T14:52:27 <colinclark> and we can definitely lessen the version churn by releases alphas, etc.
2015-06-19T14:52:28 <Bosmon> Although what counts as an "API change" will become increasingly subtle
2015-06-19T14:52:35 <colinclark> That\'ll be interesting
2015-06-19T14:52:45 <Bosmon> The definition of what "an API" is doesn\'t really describe the framework very well
2015-06-19T14:53:06 <Bosmon> In those terms, in practice, we nearly have just one API call, fluid.defaults
2015-06-19T14:53:21 <colinclark> So when I saw we\'re not like Angular, my point is that we\'re not a framework that provides familiar programming affordances
2015-06-19T14:53:22 <Bosmon> Together with a few subsidiary APIs, the ChangeApplier API, and the DOM binder API
2015-06-19T14:53:37 <colinclark> and all the of guarantees of conservatism that goes with reproducing the familiar
2015-06-19T14:53:37 <Bosmon> Which are actually APIs we change extremely rarely
2015-06-19T14:53:53 <colinclark> we know that accessibility today is poorly served by traditional programming idioms
2015-06-19T14:54:00 <colinclark> not to mention end user customization and programming
2015-06-19T14:54:19 <colinclark> which means we have to make a framework that is speculative and always adapting to insights and experiences using the tools
2015-06-19T14:54:32 <colinclark> So we\'re going to break APIs
2015-06-19T14:54:51 <colinclark> if we need to bump our major version number on a bi-monthly basis, so be it :)
2015-06-19T14:54:55 <colinclark> So that\'s the future
2015-06-19T14:55:08 <colinclark> The question now is what to do with what we\'ve got sitting in master today
2015-06-19T14:55:09 <Bosmon> I\'m fine with us reaching Infusion 43 in a couple of years : P
2015-06-19T14:55:45 <colinclark> Justin_o: are you generally fine with that, too? :)
2015-06-19T14:56:29 <Justin_o> Bosmon, colinclark: I\'m fine with the version number, worried about time/resource for doing all the necessary testing...
2015-06-19T14:56:45 <colinclark> ok
2015-06-19T14:56:54 <colinclark> That\'s safely an orthogonal issue, I think
2015-06-19T14:57:15 <colinclark> in the sense that we can say "when we cut a new release, we will always bump the major version number when we break APIs"
2015-06-19T14:57:31 <colinclark> and the question of testing becomes what motivates when we actually cut a new release
'

