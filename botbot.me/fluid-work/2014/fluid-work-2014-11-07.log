b'2014-11-07T18:55:34 <Bosmon> I\'ll pop off to dinner, back in a couple hours
2014-11-07T18:57:57 <Justin_o> Bosmon: thanks again for the help.. hopefully i\'ll have something ready for you by the time you\'re back online
2014-11-07T19:29:28 * slim_jim joined the channel
2014-11-07T19:39:33 * slim_jim has quit
2014-11-07T19:56:35 * ashgotti joined the channel
2014-11-07T19:57:07 <ashgotti> Hello all. I\'ve built a Drupal module that integrates the UI Options. It works very well but now I\'ve hit an obstacle in translating it
2014-11-07T19:57:22 <ashgotti> The documentation does not exist for internationalization
2014-11-07T20:09:22 <anastasiac> hi, ashgottie. We do have some documentation that might help you here: http://localhost:9778/LocalizationInThePreferencesFramework.html
2014-11-07T20:09:37 <anastasiac> please have a look and check back in here in the channel with any questions
2014-11-07T20:09:49 <anastasiac> ashgotti: ^
2014-11-07T20:10:15 <ashgotti> anastasiac: thank you, but that link points to a localhost
2014-11-07T20:10:25 <anastasiac> oh, shoot, sorry
2014-11-07T20:10:26 <anastasiac> hang on
2014-11-07T20:10:56 <anastasiac> ashgotti: here\xe2\x80\x99s the correct link: https://github.com/fluid-project/infusion-docs/blob/master/src/documents/LocalizationInThePreferencesFramework.md
2014-11-07T20:11:05 <anastasiac> sorry, I was doing some edits locally :-)
2014-11-07T20:11:06 <ashgotti> Thank you!
2014-11-07T20:11:35 <anastasiac> ashgotti, please check back in and let us know how it\xe2\x80\x99s going
2014-11-07T20:12:12 <ashgotti> Will do. The Drupal Module will be released publically. It\'s working now but I\'d like to make it Drupal internationalization capable first.
2014-11-07T20:13:04 <ashgotti> Ideally, users could create translations from the Drupal admin interface
2014-11-07T20:13:21 <anastasiac> ashgotti, that sounds great! I look forward to seeing it
2014-11-07T20:32:21 * kasparnet joined the channel
2014-11-07T20:32:49 <ashgotti> I\'ve read the documentation, and admittedly I\'m a novice, I\'m confused as to where I put localized message bundles and how it is determined which bundle is used
2014-11-07T20:36:55 * kasparnet has quit
2014-11-07T20:49:47 <anastasiac> hi ashgotti. When you instantiate the UIO component, one of the options you provide is the path to the folder where the message bundles are. For localization, you would just need to alter that path so that it references the right folder - wherever the message bundles are. You don\xe2\x80\x99t have to put them anywhere in particular, as long as you can specify the path to them. Does tht make sense?
2014-11-07T20:55:01 <ashgotti> anastasiac: Yup, I understand that part but is it possible to have on implementation for a multilingual site? For example, if the site is English and French, how can I set it so that if the site is English, a certain path is used, and if it\'s French, a different path is used?
2014-11-07T20:55:32 <anastasiac> ah, I see what you\xe2\x80\x99re saying, ashgotti...
2014-11-07T20:56:20 <anastasiac> ashgotti, you\xe2\x80\x99d have to do that programmatically i.e. the path in the script would have to be dependent on whatever drupal variable specifies the language
2014-11-07T20:58:06 * heidiv has quit
2014-11-07T20:59:51 <anastasiac> ashgotti, I\xe2\x80\x99m not familiar with drupal, so I can\xe2\x80\x99t just tell you offhand how to do that, but it would be something along the lines of   messagePrefix: \xe2\x80\x9cpath/to/messages/$DRUPAL_LANG\xe2\x80\x9d, then put the specific language bundles in a folder named the same as what\xe2\x80\x99s in the language variable
2014-11-07T21:02:33 * ashgotti joined the channel
2014-11-07T21:03:26 <ashgotti> anastasiac: I understand. I was hoping to use place holders in the /messages/ JSON files that point to drupal fields
2014-11-07T21:04:42 <anastasiac> ah, no, I think that wouldn\xe2\x80\x99t work, ashgotti. The JSON files are processed by the JavaScript, not PHP.
2014-11-07T21:04:52 <anastasiac> I\xe2\x80\x99d suggest creating subfolders for each language
2014-11-07T21:05:02 <anastasiac> and putting the individual language message bundles there
2014-11-07T21:05:10 <ashgotti> anastasiac: that\'s the plan. Thank you again for the help
2014-11-07T21:05:18 <anastasiac> ashgotti, I\xe2\x80\x99m not familiar with drupal, so I can\xe2\x80\x99t just tell you offhand how to do that, but it would be something along the lines of  messagePrefix: \xe2\x80\x9cpath/to/messages/$DRUPAL_LANG\xe2\x80\x9d
2014-11-07T21:05:27 <anastasiac> does that make sense?
2014-11-07T21:06:36 <ashgotti> It does. Drupal uses EN/FR/etc so I\'m going to create sub-folders for each applicable language in the /messages/ folder and point to them based on the language in use
2014-11-07T21:06:50 <anastasiac> exactly
2014-11-07T21:08:05 <ashgotti> Thanks again!
2014-11-07T21:10:30 * ashgotti has quit
2014-11-07T21:25:06 * anvk has quit
2014-11-07T21:37:25 * jhung_away has quit
2014-11-07T21:59:56 * anastasiac has quit
2014-11-07T22:32:27 * simonjb has quit
2014-11-07T22:53:32 <avtar> Bosmon, Bosmon7: ping
2014-11-07T22:54:04 <Bosmon> Hey there avtar
2014-11-07T22:54:14 <avtar> how\'s it going?
2014-11-07T22:54:20 <Bosmon> It is tolerable
2014-11-07T22:54:22 <Bosmon> How is it over there?
2014-11-07T22:54:34 <avtar> just spectacular
2014-11-07T22:55:15 <avtar> i had a quick question for you regarding the upcoming changes related to windows and moving towards node 0.10.*
2014-11-07T22:55:29 <Bosmon> avtar - sure
2014-11-07T22:55:43 <avtar> any idea when that\'s going to land?
2014-11-07T22:55:46 <Bosmon> Unfortunately in terms of Windows it will be an all-or-nothing deal
2014-11-07T22:55:52 <Bosmon> We believe it will land on Monday, perhaps
2014-11-07T22:55:57 <avtar> ok
2014-11-07T22:57:56 <Bosmon> That is, when the change lands, node 0.8.x will stop working on Windows
2014-11-07T22:58:03 <Bosmon> It appears we get no backwards compatibility
2014-11-07T22:58:28 <Bosmon> I\'ve been looking ahead to node 0.12.x today and it appears there will be breaking API changes there too
2014-11-07T22:59:11 <avtar> i was asking because i picked up the jenkins work that simon was doing and moving away from 0.8.* is actually desirable, for this particular task anyway
2014-11-07T22:59:30 <Bosmon> avtar - ok cool
2014-11-07T23:00:02 <Bosmon> What\'s the issue involved?
2014-11-07T23:00:15 <Bosmon> My branch should already be testable btw - https://github.com/GPII/windows/pull/56
2014-11-07T23:00:20 <Bosmon> It requires the matching branch for universal
2014-11-07T23:00:30 <Bosmon> But as far as I know the tests should pass 100%
2014-11-07T23:00:54 <Bosmon> Which is a few more % than they used to in the past : P
2014-11-07T23:01:23 <avtar> when the first windows openstack image was created i used chocolatey to satisfy the dependencies listed in simon\'s repo https://github.com/simonbates/gpii-automation/blob/master/README.md#install-software
2014-11-07T23:01:58 <avtar> but then simon would perform some manual tasks to set up node 0.8.*, npm, etc.
2014-11-07T23:02:03 <Bosmon> right
2014-11-07T23:02:08 <Bosmon> Those steps were always very irritating
2014-11-07T23:02:31 <avtar> so now i should be able to automate the rest
2014-11-07T23:02:40 <Bosmon> cool
2014-11-07T23:02:56 <Bosmon> It\'s nice to imagine that all of our problems are starting to solve one another : P
2014-11-07T23:03:03 <avtar> yes
2014-11-07T23:03:59 <avtar> i picked up the jenkins work that simon was doing and we made some progress today by moving away from windows restore points and using openstack tools to manage the lifecycle of the test vm
2014-11-07T23:04:09 <Bosmon> I\'m also relatively confident now that if we do find further test failures exposed on Windows, that we schemes for fixing them relatively quickly
2014-11-07T23:04:22 <Bosmon> That\'s really great
2014-11-07T23:04:41 <Bosmon> It will make such a difference to all of our work to have builds that we can repeat and test
2014-11-07T23:06:08 <avtar> the windows disk image will need to be recreated and i wanted to see if i could make the nodejs change at the same time. i was going to wait to create the image until after the 0.10.* changes were merged but i\'ll go ahead and start that on monday since i can use your branch to test.
2014-11-07T23:06:19 <Bosmon> Great
2014-11-07T23:06:53 * Justin_o has quit
2014-11-07T23:07:36 <avtar> the fedora 20 work remains but that should be more straightforward compared to what had to be done for windows
2014-11-07T23:07:47 <Bosmon> Hopefully, yes
2014-11-07T23:08:00 <Bosmon> I\'ll move on to making a corresponding linux branch tomorrow
2014-11-07T23:08:14 <Bosmon> But we never had terribly many oddities on that platform
2014-11-07T23:08:20 <Bosmon> And it always supported node 0.10.x anyway
2014-11-07T23:09:01 <avtar> and fedora licensing is easier to work with
2014-11-07T23:09:17 <Bosmon> I\'m glad there are no imminent signs of node 0.12.x
2014-11-07T23:09:21 <Bosmon> It has taken us years to get this far : P
2014-11-07T23:13:15 <avtar> https://www.joyent.com/blog/node-js-and-the-road-ahead
2014-11-07T23:13:23 <avtar> "The release of Node v0.12 is imminent" :P
2014-11-07T23:13:28 <Bosmon> Yes
2014-11-07T23:13:34 <Bosmon> That has been said for over 6 months I believe
2014-11-07T23:14:17 <avtar> yup
2014-11-07T23:14:38 <avtar> in jan
2014-11-07T23:14:48 <Bosmon> wow
2014-11-07T23:22:24 <avtar> the one thing about creating windows instances in this clustered environment is that it\'s going to be painful if someone is eagerly waiting for tests results
2014-11-07T23:22:39 <Bosmon> I think that\'s fine
2014-11-07T23:22:47 <Bosmon> If someone is eagerly waiting for something they can do it on their machine
2014-11-07T23:23:08 <Bosmon> The real value is in knowing, within say a day, whether some unexpected change has collaterally broken our builds
2014-11-07T23:23:16 <Bosmon> This happened earlier in the year and it was weeks before we noticed
2014-11-07T23:23:21 <avtar> a day should be fine
2014-11-07T23:23:51 <avtar> if the 33 gig image isn\'t cached on a compute node then it can take up to 30 mins before a vm is running
2014-11-07T23:24:23 <Bosmon> Seems perfectly reasonable
2014-11-07T23:24:25 <avtar> if it is cached then the entire process should take about 15 mins
2014-11-07T23:24:41 <Bosmon> The more awkward issue is if the VM reveals an issue that we can\'t succeed in reproducing locally
2014-11-07T23:24:45 <Bosmon> Why is the image so big?
2014-11-07T23:25:02 <Bosmon> Surely even today a Windows install should fit into about 8G compressed
2014-11-07T23:26:20 <avtar> when i tried creating the image with 15 gigs of space the process failed due to the number of windows 8.1 security updates involved
2014-11-07T23:26:28 <Bosmon> oh dear
2014-11-07T23:26:31 <Bosmon> How horrible
2014-11-07T23:27:25 <avtar> so you need to leave extra space for future upgrades and then the third party software that potentially gets installed
2014-11-07T23:28:15 <avtar> so fedora should be a more pleasant experience in that regard as well
'

b'2014-11-07T17:22:59 <Bosmon> And so your implementation will corrupt the user\'s profile
2014-11-07T17:23:03 <Bosmon> Don\'t you remember?
2014-11-07T17:23:50 <Bosmon> I specially directed you to an implementation link in the mail I sent on Tuesday.....
2014-11-07T17:23:54 <Bosmon> VVANTUNNEZ!
2014-11-07T17:23:54 <jhernandez> right now the profile isn\'t being corrupted after a set/restore process
2014-11-07T17:24:11 <Bosmon> jhernandez - it is being corrupted - you said so yourself
2014-11-07T17:24:15 <Bosmon> In the case the profile was empty to start with
2014-11-07T17:24:20 <Bosmon> It becomes filled with the value "null"
2014-11-07T17:25:33 <Bosmon> Well, actually, you are cheating - since you use JSON.stringify to produce the file contents, these values will be stripped out
2014-11-07T17:25:38 <Bosmon> But i) you have no tests for this behaviour
2014-11-07T17:26:09 <Bosmon> and ii) it isn\'t reasonable to depend on JSON.stringify to strip the corrupt values out - you should make sure that the in-memory structure is correct to reduce the risk of problems in the future
2014-11-07T17:28:45 <jhernandez> oh, I see
2014-11-07T17:29:06 <jhernandez> yes, I\'m cheating when stringifying the content to be written
2014-11-07T17:29:11 <jhernandez> xD
2014-11-07T17:29:28 <jhernandez> ok
2014-11-07T17:29:40 <Bosmon> Oh gosh.... I found something awful
2014-11-07T17:29:52 <Bosmon> The upcoming docs for node 0.12 have removed my docs example involving *CATT*
2014-11-07T17:30:25 <jhernandez> NO WAY!
2014-11-07T17:30:31 <Bosmon> http://nodejs.org/api/vm.html#vm_vm_runincontext_code_context_filename
2014-11-07T17:30:35 <Bosmon> See, these are the current docs
2014-11-07T17:31:00 <Bosmon> http://nodejs.org/dist/v0.11.13/docs/api/vm.html#vm_script_runincontext_contextifiedsandbox_options
2014-11-07T17:31:03 <Bosmon> :( :( :(
2014-11-07T17:31:56 * kasparnet has quit
2014-11-07T17:33:43 * lliskovoi has quit
2014-11-07T17:34:23 <Bosmon> https://github.com/joyent/node/commit/02fde585b15f0dd117a297a6c4d35b181b530c63#diff-7c0ae28f79bfcfc8c4b5bf6e9042ea54
2014-11-07T17:37:19 <Bosmon> CATTISGGONE!
2014-11-07T17:38:07 <Justin_o> Bosmon: how does this look
2014-11-07T17:38:12 <Justin_o> https://www.irccloud.com/pastebin/fJfsy91e
2014-11-07T17:39:15 <Bosmon> Justin_o - looks ok although you are mysteriously missing an = sign on line 3
2014-11-07T17:39:26 <Bosmon> Do you have an editor even less capable than my 2007 Eclipse plugin? : P
2014-11-07T17:41:16 <Justin_o> hah yes.. i don\'t want to minus fluid.promise()
2014-11-07T17:41:50 <Justin_o> I\'m using atom right now.. it cycles between being great and all the plugins not working..
2014-11-07T17:41:59 <Bosmon> oh dear
2014-11-07T17:42:03 <Bosmon> Does it update itself?
2014-11-07T17:42:10 <Bosmon> Or does it run from the web
2014-11-07T17:42:39 <Justin_o> it\'s the IDE from the github guys...
2014-11-07T17:42:46 <Bosmon> yes
2014-11-07T17:43:06 * danaayotte has quit
2014-11-07T17:43:11 <Justin_o> you have to trigger the update but it lets you know
2014-11-07T17:43:31 <Bosmon> ah
2014-11-07T17:44:14 <Justin_o> however the plugins sometimes stop working afterwards.. my jshint has stopped working for a while now.. although i just recently expanded the spell check which is why there are dramatically less typos in my recent updates to the pull request
2014-11-07T17:45:11 <Justin_o> jshint in atom.. the grunt one still works well
2014-11-07T17:45:29 <Justin_o> of course that error in my file was on line 666
2014-11-07T17:45:39 <Bosmon> :)
2014-11-07T17:46:07 <Bosmon> If it was REALLY from the devil you could be sure he would not introduce an error that could be detected using jshint
2014-11-07T17:46:26 <Bosmon> At least since the 14th century, the devil has been much more sophisticated than that : P
2014-11-07T17:46:47 <Justin_o> haha i think he figured out how to disable my linting completely
2014-11-07T17:47:04 <Justin_o> and inject random spelling errors throughout
2014-11-07T17:50:50 <Justin_o> Bosmon: okay.. so i have the promise in place in the queuedDataSource and implementors of a dataSource will have to do likewise.. now what were you saying about options
2014-11-07T17:51:02 <Justin_o> get/set/delete requests should take an option object?
2014-11-07T17:51:22 <Justin_o> set(directModel, model, options);?
2014-11-07T17:51:26 <Justin_o> is that correct?
2014-11-07T17:51:32 <jhernandez> Bosmon: okay, removed the stringify thing and used the same shortcut - now we\'re not corrupting the file anymore
2014-11-07T17:51:54 <Bosmon> Justin_o - yes
2014-11-07T17:52:13 <Justin_o> Bosmon: what can be in the options?
2014-11-07T17:52:21 <Justin_o> i guess why isn\'t it part of the directModel
2014-11-07T17:52:39 <Bosmon> Justin_o - "implementation-specific details reflecting the handling of the request"
2014-11-07T17:53:21 <Bosmon> Justin_o - because they don\'t affect the "coordinates" of what is being written
2014-11-07T17:53:36 <Bosmon> For example, both a POST and PUT request to same URL are "morally addressing the same state"
2014-11-07T17:54:06 <Justin_o> Bosmon: okay
2014-11-07T17:54:07 <Justin_o> thanks..
2014-11-07T17:54:13 <Bosmon> jhernandez - can you add a test case testing the effect of those changes you just made - thanks!
2014-11-07T17:55:00 <Bosmon> Justin_o - similarly, in your test case, directing the implementation "please delay 100ms when servicing this request" clearly doesn\'t mean to influence which state is being read or written : P
2014-11-07T17:56:17 <jhernandez> Bosmon: sure, now I gotta run - dinning with my belgian family - but I\'ll try to add a test case by tonight
2014-11-07T18:03:49 <Bosmon> Thanks jhernandez - have a great DINER!
2014-11-07T18:04:04 <Bosmon> Justin_o - as well as which, you\'d end up interfering with just the effect you\'re trying to test
2014-11-07T18:04:24 <Bosmon> if the "options" went into the directModel, a different choice of delay would end up hashing the request into a different queue
2014-11-07T18:04:50 <Justin_o> Bosmon: yes for my tests that would be entirely unhelpful
2014-11-07T18:07:06 * avtar joined the channel
2014-11-07T18:18:28 <Justin_o> Bosmon: so now that we have options.. i have two different styles of request methods.. ones that have signatures like (directModel, model, options) and (directModel, options)
2014-11-07T18:18:39 <Bosmon> Justin_o - that\'s correct
2014-11-07T18:18:46 <Bosmon> But "options" just takes the place that "callback" did before
2014-11-07T18:18:50 <Justin_o> i had a similar case before with the callback.. however with the promises the code block is bigger..
2014-11-07T18:18:52 <Justin_o> yes
2014-11-07T18:18:54 <Justin_o> :)
2014-11-07T18:19:42 <Justin_o> i want to reduce my code duplication here..
2014-11-07T18:19:46 <Bosmon> ok
2014-11-07T18:19:49 <Justin_o> https://www.irccloud.com/pastebin/Sj7I81zI
2014-11-07T18:19:49 <Bosmon> Let\'s see what you have
2014-11-07T18:19:52 <Bosmon> Thanks
2014-11-07T18:20:32 <Justin_o> i guess i could use call and just build up an array of args.. but i image i\'ll have to restrict these to thatist functions
2014-11-07T18:20:41 <Justin_o> unless there is an easy way of knowing the context
2014-11-07T18:20:54 <Bosmon> Well, you know the complete set of signatures
2014-11-07T18:20:57 <Bosmon> You can do 2 things
2014-11-07T18:21:28 <Bosmon> i) var options = fluid.makeArray(arguments).pop()
2014-11-07T18:22:21 <Bosmon> ii) you can say response.then(requestComplete, requestComplete)
2014-11-07T18:22:47 <Bosmon> plus fluid.promise.follow(response, promise);
2014-11-07T18:23:05 <Bosmon> That should cut your 17 lines down to about 3
2014-11-07T18:23:59 <Bosmon> Oh sorry, this is the calling end
2014-11-07T18:24:14 <Bosmon> But yes, the same principle applies
2014-11-07T18:24:16 <Justin_o> yes ;)
2014-11-07T18:24:32 <Justin_o> okay.. not sure i follow though
2014-11-07T18:24:40 <Justin_o> did you want the full function to look at?
2014-11-07T18:24:45 <Bosmon> Yes
2014-11-07T18:24:58 <Justin_o> https://www.irccloud.com/pastebin/uRIQxtW1
2014-11-07T18:28:15 <Bosmon> Oh yes, your test for request.model is dodgy - since 0, null etc. are perfectly acceptable models
2014-11-07T18:28:32 <Bosmon> You should just have an explicit "type" field in request
2014-11-07T18:28:44 <Justin_o> oh really.. i guess you could want to set that
2014-11-07T18:28:47 <Bosmon> of "write" or "read"
2014-11-07T18:28:58 <Bosmon> Well ok, that doesn\'t quite work either
2014-11-07T18:28:58 <Justin_o> but delete has the same signature as get
2014-11-07T18:29:12 <Bosmon> ok well
2014-11-07T18:30:10 <Bosmon> We can always have the ancient style var args = model in request ? [request.directModel, request.model, request.options] : [request.directModel, request.options];
2014-11-07T18:30:13 <Bosmon> Shortish and moral
2014-11-07T18:30:24 <Bosmon> Then var response = request.method.apply(null, args);
2014-11-07T18:30:36 <Bosmon> response.then(requestComplete, requestComplete);
2014-11-07T18:30:42 <Bosmon> fluid.promise.follow(response, promise);
2014-11-07T18:30:44 <Bosmon> return promise;
2014-11-07T18:31:03 <Justin_o> what does fluid.promise.follow(response, promise); do
2014-11-07T18:31:11 <Bosmon> That one actually has docs! : P
2014-11-07T18:31:13 <Justin_o> and is requestComplete in your example point at the same function?
2014-11-07T18:31:30 <Bosmon> yes
2014-11-07T18:32:05 <Bosmon> https://github.com/amb26/infusion/blob/FLUID-5513/src/framework/core/js/FluidPromises.js#L82
2014-11-07T18:33:21 <Justin_o> Bosmon: cool.. i do need to update the state of the queue and fire an event though when the promise from the actual datasource request completes
2014-11-07T18:33:30 <Justin_o> can i still do this with follow.. or is more like a chain?
2014-11-07T18:33:44 <Bosmon> Well, everything is done
2014-11-07T18:33:56 <Bosmon> requestComplete is still the same function
2014-11-07T18:34:19 <Bosmon> You have ensured that it will be fired, and that the promise resolution value will be forwarded to the user
2014-11-07T18:43:42 <Justin_o> Bosmon: hmm.. i\'m still missing something.. so the follow implementation is done by calling resolve and reject directly https://github.com/amb26/infusion/blob/FLUID-5513/src/framework/core/js/FluidPromises.js#L83
2014-11-07T18:44:29 <Justin_o> wouldn\'t that prevent me from adding in my methods.. or is your suggestion actually saying i have another listener to the promise which acts on the return of it
2014-11-07T18:44:50 <Justin_o> so i have one inside the function and then also to whomever is using the promise that is returned.
2014-11-07T18:47:26 <Bosmon> Justin_o - you\'ve seen the (tiny) implementation of fluid.promise : P
2014-11-07T18:47:32 <Bosmon> Handlers are only ever added, they are never removed
2014-11-07T18:47:54 <Justin_o> Bosmon: cool.. okay.. let me try this out.. thanks for the tips
2014-11-07T18:48:09 <Bosmon> You might like to think of a promise as i) a compound of 2 events (success and failure), ii) with no remove methods, and iii) with the ability to resolve "backwards in time" if a handler is added after the event has fired, and iv) for which each event can fire only once
2014-11-07T18:48:31 <Bosmon> At least, that\'s the way WE think of promises : P
2014-11-07T18:48:39 <Bosmon> In most communities such a view is considered irreligious
2014-11-07T18:48:41 <Justin_o> Bosmon: thanks that\'s actually quite helpful
2014-11-07T18:48:55 <Justin_o> Bosmon: another question... var response = request.method.apply(null, args);
2014-11-07T18:49:15 <Justin_o> does that mean that a method requiring a "this" could not be used for get/set/delete
2014-11-07T18:49:57 <Bosmon> Justin_o - I think we have a public community standard that every API exposed to the user will be that-ist
2014-11-07T18:51:50 <Justin_o> Bosmon: is that true.. what about the thisist methods we have
2014-11-07T18:51:56 <Justin_o> maybe we just use those for listeners though
2014-11-07T18:52:28 <Bosmon> We never implement thisist methods of our own
2014-11-07T18:52:35 <Bosmon> We just supply support to adapt to those provided by others
2014-11-07T18:52:37 <Justin_o> Bosmon: that\'s true
2014-11-07T18:52:46 <Justin_o> Bosmon: okay
2014-11-07T18:53:30 <Justin_o> so if someone was to say make a dataSource for jQuery ajax or something, they would have to provide a wrapper than converted methods to that-ism
2014-11-07T18:53:43 <Bosmon> And I think we reserve the right to use them for performance reasons in implementation details : P
2014-11-07T18:53:54 <Bosmon> Justin_o - but the jQuery ajax API is entirely unlike the dataSource API
2014-11-07T18:54:03 <Bosmon> They would always need to supply a wrapper in every case
2014-11-07T18:54:04 <Justin_o> Bosmon: okay.. yah.. bad example :)
2014-11-07T18:54:30 <Justin_o> Bosmon: better question. will we run into an issue for "And I think we reserve the right to use them for performance reasons in implementation details"
2014-11-07T18:54:44 <Bosmon> I mean, it does members called "get" and "delete" - but that\'s the only resemblance : P
2014-11-07T18:54:58 <Bosmon> Well, if they are implementation details, they will never be exposed in public APIs
2014-11-07T18:55:05 <Bosmon> Of which dataSource is an example
2014-11-07T18:55:18 <Justin_o> okay.. sounds good.. i just want to make sure we aren\'t missing anything
2014-11-07T18:55:23 * slim_jim has quit
2014-11-07T18:55:25 <Bosmon> cool
2014-11-07T18:55:28 <Bosmon> Well, it\'s all looking good
'

b'2014-11-07T15:52:02 <Bosmon> A special disposable magic reference
2014-11-07T15:52:05 <Bosmon> To confuse the unwary
2014-11-07T15:54:57 <Bosmon> Justin_o, colinclark - my FLUID-5513 branch is now updated to master
2014-11-07T15:55:10 <colinclark> thanks
2014-11-07T15:55:42 <Justin_o> i was talking to a git guy at the GSoC reunion about what to do about large repos. He was mentioning shallow clones.. where you specify --depth to get only a the most recent x number of commits.. also only pulling in certain branches would help with that.. our repo is super small which is nice, but these could help if we ever start putting designs in a git
2014-11-07T15:55:42 <Justin_o> repo.
2014-11-07T15:57:25 <Justin_o> Bosmon: thanks.. any chance there is some documentation on this or how it is used with the dataSource you mentioned earlier
2014-11-07T15:58:05 <Bosmon> Justin_o - for reference, here is the Kettle dataSource which works with it
2014-11-07T15:58:06 <Bosmon> https://github.com/amb26/kettle/blob/GPII-434/lib/dataSource.js#L202
2014-11-07T15:58:41 <Justin_o> cool thanks
2014-11-07T15:58:42 <Bosmon> Sadly no separate documentation as yet :(
2014-11-07T15:58:54 <Bosmon> No doubt I will write some kind of "inflammatory whitepaper" once we get a bit more time
2014-11-07T15:59:33 <Justin_o> :)
2014-11-07T16:00:14 <Bosmon> Justin_o - the plan is at some point in the future, for your wrappers to fit into a generalised version of the slightly peculiar "perverted listeners" scheme that you can see this component operating
2014-11-07T16:00:30 <Bosmon> At the moment, it can only process listeners which fit into the "fluid.promise.sequence" framework
2014-11-07T16:00:54 <Bosmon> But we will have to improve this so it is capable of dealing with, for example, a dataSource which might drop requests
2014-11-07T16:01:00 <Justin_o> Bosmon: in the queued dataSource i have.. there is a callbackProxy which basically replaces the callback and fires the original callback internally. This is done so that we can fire events and change state. should this be changed to always use a promise instead?
2014-11-07T16:01:30 <Justin_o> Bosmon: okay.. since those will never get fullfilled
2014-11-07T16:01:43 <Bosmon> Justin_o - I think it\'s clearer if an impl just uses promises throughout, yes
2014-11-07T16:02:00 <Bosmon> My feeling is that we will continue to use callbacks, if at all, just as a courtesy to a particular kind of direct user of an API
2014-11-07T16:02:24 <Bosmon> Most likely it\'s just best to say that "callbacks have had their day"
2014-11-07T16:02:32 <Bosmon> We can enter the 21st century at least to that extent : P
2014-11-07T16:04:54 <Justin_o> Bosmon: :)
2014-11-07T16:05:08 <Justin_o> Bosmon: so for this implementation should i drop the callback option completely?
2014-11-07T16:05:26 <Bosmon> Well, I suppose..... what do you think, colinclark?
2014-11-07T16:05:35 <Bosmon> Do you think we should just say "callbacks have had their day"?
2014-11-07T16:06:04 <Bosmon> kaspernett seems to be gone unfortunately
2014-11-07T16:07:09 <Justin_o> Bosmon: so if we do that.. anyone using a dataSource should expect to get a promise returned from a get/set/delete request?
2014-11-07T16:08:27 <Bosmon> Yes well...
2014-11-07T16:08:45 <Bosmon> Another useful point of "lore" is this GPII utility which I find myself using a fair bit
2014-11-07T16:08:52 <Bosmon> https://github.com/amb26/universal/blob/GPII-434/gpii/node_modules/settingsHandlers/src/settingsHandlerUtilities.js#L34
2014-11-07T16:09:01 <Bosmon> It\'s the kind of thing which "in the industry" is criticised strongly
2014-11-07T16:09:36 <Bosmon> In some cases, for example, you in fact KNOW that a particular source/settingsHandler operates synchronously
2014-11-07T16:09:49 <Bosmon> Whereas it is widely claimed that noone should ever rely on any such thing
2014-11-07T16:10:00 <Bosmon> I do see the point of the argument
2014-11-07T16:10:04 <Justin_o> does it just make execution faster?
2014-11-07T16:10:23 <Bosmon> Yes, the two main arguments I see centre around i) efficiency, ii) debuggability
2014-11-07T16:10:39 <Justin_o> Bosmon: i see.. makes sense
2014-11-07T16:10:46 <Bosmon> Whatever anyone says, it\'s simply not possible to make an asynchronous operation as fast as a synchronous one
2014-11-07T16:10:54 <Bosmon> Although at least in node.js, the gap can be made very narrow indeed
2014-11-07T16:11:20 <Bosmon> Secondly - whatever we think about having "very long stack traces".... the situation isn\'t to be compared to "only ever having very short ones"
2014-11-07T16:11:30 <Bosmon> But to be honest both of these are relatively weak kinds of arguments
2014-11-07T16:11:59 <Bosmon> And I\'m usually used to finding myself on the other side of arguments that involve some general principle of avoiding hazardous dependencies
2014-11-07T16:12:27 <Justin_o> :)
2014-11-07T16:12:35 <Justin_o> I think colin must be away
2014-11-07T16:13:07 <Bosmon> But I\'m quite keen to minimise the kinds of tooling etc. which we need to debug our work, whilst we\'re waiting to produce our PROPER tools
2014-11-07T16:13:27 <Bosmon> And lugging around something like a "long stack frames generator" in all of our environments seems like an unpleasant step
2014-11-07T16:14:00 <Bosmon> Also, we are planning for a model in which every individual tiny value resolved by IoC might harbour a promise
2014-11-07T16:14:14 <Bosmon> And so we, I think, might take the efficiency argument more seriously than others might
2014-11-07T16:14:38 <Justin_o> Bosmon: that sounds like thousand\'s of promises
2014-11-07T16:14:42 <Bosmon> So much so that the IoC variety of promises might be even smaller than these ones
2014-11-07T16:14:58 <Bosmon> That is, they would be what could be called "half-promises" that are not capable of signally failure
2014-11-07T16:15:01 <Bosmon> signalling
2014-11-07T16:15:20 <Bosmon> And might even (GASP) involve the use of PROTOTYPES to encode their methods
2014-11-07T16:15:34 <Justin_o> Bosmon: i\'ll look away
2014-11-07T16:15:44 <Bosmon> So the "ultra-tiny" IoC variety of promises might just consist of i) an Object, ii) an Array
2014-11-07T16:17:02 <Bosmon> Anyway, if you have some spare time for some light reading, you might be interested by some of the scaremongering that goes around at the moment criticising the use of APIs which might conditionally resolve synchronously or asynchronously
2014-11-07T16:17:19 <Bosmon> http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony
2014-11-07T16:17:24 <Bosmon> Here is a typical pointer into the literature
2014-11-07T16:18:03 <Bosmon> "you will render any code using this API impossible to reason about"
2014-11-07T16:18:08 <Bosmon> This claim to me seems a little strong
2014-11-07T16:18:57 <Bosmon> Anyway, your original question was - "should I make my component always return promises" to which I think the answer would be "yes, that is a valid strategy"
2014-11-07T16:19:46 <Bosmon> We don\'t currently have any "direct clients" for this API, unlike the large quantity of existing callbackified GPII code which we inherited
2014-11-07T16:20:24 <Bosmon> And it will only appear as a deeply embedded component in a bigger architecture, and it is most likely that it will only ever in fact be called by the framework itself
2014-11-07T16:20:37 * danaayotte joined the channel
2014-11-07T16:20:46 <Bosmon> So simplifying your implementation work by only ever dealing in promises could be a viable choice
2014-11-07T16:24:02 <Justin_o> Bosmon: okay.. so fluid.dataSource will expect an implementation of get/set/delete that return promises instead of using callbacks.. and therefore the queuedDataSource will behave similarly.
2014-11-07T16:24:24 <Justin_o> and making a promise should be a simple as fluid.promise()?
2014-11-07T16:25:39 <Justin_o> and i\'d call resolve or reject on said promise
2014-11-07T16:26:26 <slim_jim> http://devdocs.io
2014-11-07T16:26:44 * kasparnet joined the channel
2014-11-07T16:28:54 <Bosmon> Justin_o - that\'s right
2014-11-07T16:30:23 <Justin_o> Bosmon: thanks.. does fluidPromises.js have any dependencies other than fluid.js?
2014-11-07T16:30:59 <Bosmon> Justin_o - none
2014-11-07T16:31:09 <Bosmon> If you don\'t use any of the algorithms, it doesn\'t even depend on Fluid.js : P
2014-11-07T16:31:45 <Bosmon> oh well
2014-11-07T16:31:48 <Bosmon> I guess it uses fluid.fail()
2014-11-07T16:31:53 <Bosmon> Can\'t escape that.....
2014-11-07T16:38:56 <colinclark> You were asking me earlier about my opinioin
2014-11-07T16:39:11 <colinclark> I don\xe2\x80\x99t suppose I have a fully resolved one, to be honest
2014-11-07T16:39:41 <colinclark> my intiial reaction in these kinds of discussions tends to reolve around the argument \xe2\x80\x9cWe have this cake, let\xe2\x80\x99s eat it\xe2\x80\x9d
2014-11-07T16:39:51 <colinclark> which often erodes with time
2014-11-07T16:40:02 <colinclark> I guess cake turns to crumbs once you\xe2\x80\x99ve eaten it
2014-11-07T16:40:38 <colinclark> If we didn\xe2\x80\x99t have to face a promisified world squarely, we probably wouldn\xe2\x80\x99t have fluid.promise() yet
2014-11-07T16:40:58 <colinclark> and I think many of us who have had to implement promises in our APIs and use them in other peoples\xe2\x80\x99 APIs appreciate them
2014-11-07T16:41:03 <Justin_o> i\'m yet again craving cake
2014-11-07T16:41:10 * jhung is now known as jhung_away
2014-11-07T16:41:33 <colinclark> and the argument in favour of supporting callbacks ends up boiling down to izs\xe2\x80\x99 \xe2\x80\x9cno extra stuff\xe2\x80\x99\xe2\x80\x9d
2014-11-07T16:41:38 <colinclark> which is in practice pretty weak
2014-11-07T16:42:02 <colinclark> in my experience, that ends up only really being relevant when you\xe2\x80\x99re experimenting in the console or something
2014-11-07T16:42:28 <Bosmon> Well... I think the drive for fluid.promise was more than just facing the world..... although I suppose you could say the threat of having when.js in the GPII codebase is an example of "facing the world"
2014-11-07T16:42:38 <colinclark> I guess my point wasn\xe2\x80\x99t quite that
2014-11-07T16:42:49 <colinclark> I believe \xe2\x80\x9cfacing the world\xe2\x80\x9d is really something we do well
2014-11-07T16:42:55 * lliskovoi joined the channel
2014-11-07T16:42:57 <colinclark> which is to say, face the reality of a problem
2014-11-07T16:43:03 <colinclark> not \xe2\x80\x9cthe world\xe2\x80\x9d as \xe2\x80\x9cwhat everyone else does"
2014-11-07T16:43:06 <Bosmon> Right, I see
2014-11-07T16:43:26 <colinclark> My point was, fluid.promise() exists because we faced a concrete problem for which Promises clearly had a solution
2014-11-07T16:43:34 <Bosmon> I think it would have been prohibitive to asynchronise the LifecycleManager without promises
2014-11-07T16:43:51 <Bosmon> And I\'m sort of glad that they "cropped up around us" during the time we were considering the problem
2014-11-07T16:43:59 <colinclark> as opposed to, for the past couple of years, I just had this lingering sense that it was people who were having fun goofing with functional programming problems
2014-11-07T16:44:11 <Bosmon> I remember we started to consider the problem almost the next moment after we\'d implemented the LifecycleManager
2014-11-07T16:44:28 <colinclark> yup, exactly
2014-11-07T16:44:40 <Bosmon> And as usual I think, especially after I\'ve now been through the work WITH promises, rather underestimated the scale of it
2014-11-07T16:44:57 <colinclark> Despite the continued rot in this particular part of Flocking, I also found that I was able to \xe2\x80\x9creason about\xe2\x80\x9d asynchronous buffer loading much more clearly once I introduced promises
2014-11-07T16:45:02 <Bosmon> Given I think the lifecycleManager is something like 3 or 4 nested loops deep with activities that need to be synchronised
2014-11-07T16:45:07 <colinclark> yup
2014-11-07T16:45:26 <Bosmon> And also which are laden with bizarre sideeffects and "back channels" by which intermediate values get advertised
2014-11-07T16:47:13 <colinclark> My impression is that we\xe2\x80\x99re going to see callbacks replaced by Promises in all new W3C standards as well
2014-11-07T16:47:21 <colinclark> Not that I think this really matters
2014-11-07T16:58:15 <jhernandez> Bosmon: okay
2014-11-07T16:58:21 <jhernandez> ANTVANIQ!
2014-11-07T16:58:41 <jhernandez> got a branch to address GPII-1001
2014-11-07T16:58:54 <jhernandez> do you want me to create a pull request of it?
2014-11-07T16:59:08 <jhernandez> to ... master?
2014-11-07T17:00:15 <Bosmon> jhernandez - ok
2014-11-07T17:02:46 <jhernandez> ok, what?
2014-11-07T17:03:09 <jhernandez> about creating a pull to linux/master, isn\'t it?
2014-11-07T17:05:37 <Bosmon> it is, it is!
2014-11-07T17:07:23 * colinclark has quit
2014-11-07T17:15:01 <Justin_o> Bosmon: what\'s the format for being notified for a rejected a promise.. get(directModel).error(); ?
2014-11-07T17:15:20 <Bosmon> Justin_o - it\'s the 2nd argument to "then"
2014-11-07T17:15:38 <Justin_o> Bosmon: ah okay.. get(directModel).then(success, error);
2014-11-07T17:15:50 <Bosmon> yup
2014-11-07T17:15:57 <Bosmon> Thanks for spotting the frameworkDependencies issue
2014-11-07T17:16:03 <Justin_o> Bosmon: np
2014-11-07T17:16:39 <Justin_o> Bosmon: another question... for the queuedDataSource should the promise be rejected when a request is dropped
2014-11-07T17:16:47 <Bosmon> Justin_o - certainly not
2014-11-07T17:16:57 <Justin_o> Bosmon: okay.. it just never gets returned?
2014-11-07T17:17:17 <Justin_o> or we replace that promise with another one
2014-11-07T17:18:03 <Bosmon> Justin_o - it\'s actually a funny issue, isn\'t it
2014-11-07T17:18:09 <Bosmon> That the callback version of the API rather masks
2014-11-07T17:18:25 <Bosmon> But yes
2014-11-07T17:18:34 <Bosmon> It could only be implemented as a "promise which never resolves"
2014-11-07T17:18:45 * kasparnet has quit
2014-11-07T17:19:03 <Bosmon> At the end of the day, there will really be callbacks backing these things up
2014-11-07T17:19:09 <Bosmon> At which point it will "come out in the wash"
2014-11-07T17:20:54 <Justin_o> Bosmon: what do you mean by "there will really be callbacks backing these things up"
2014-11-07T17:21:11 <Bosmon> Justin_o - well, you can\'t actually USE a promise unless you attach some kind of callback to it : P
2014-11-07T17:21:30 <Bosmon> And under the usage model we anticipate, all the callbacks attached to these sequences of promises will actually be the same one
2014-11-07T17:21:39 <Bosmon> And so therefore nothing in practice will be "lost"
2014-11-07T17:21:56 <Bosmon> But yes, certainly on the face of it could feel irresponsible to return a promise that will never resolve : P
2014-11-07T17:22:00 <Justin_o> you mean the success function passed to then?
2014-11-07T17:22:09 <Bosmon> Justin_o - yes
2014-11-07T17:22:27 * kasparnet joined the channel
2014-11-07T17:22:32 <jhernandez> Bosmon: done - now, what\'s next?
2014-11-07T17:22:43 <Bosmon> jhernandez - not done
2014-11-07T17:22:50 <jhernandez> WHAT?
2014-11-07T17:22:51 <jhernandez> xD
2014-11-07T17:22:54 <Bosmon> You have not implemented the "undefined value" semantic that we talked about
'

b'2014-11-07T14:26:26 <amilchev> in this format: https://code.stypi.com/7ajwju5c (lines 37-56)
2014-11-07T14:26:52 <amilchev> kasparnet: you can ping Claudia about that
2014-11-07T14:29:13 <kasparnet> amilchev: yeah, I\'ll do that.. and that definitely seems reasonable for F2F
2014-11-07T14:44:18 * anastasiac joined the channel
2014-11-07T14:55:16 <kasparnet> ping anastasiac
2014-11-07T14:55:19 <kasparnet> ooops
2014-11-07T14:55:23 <kasparnet> wanted that to be antranig
2014-11-07T14:55:24 <kasparnet> :)
2014-11-07T14:55:27 <kasparnet> ping Bosmon
2014-11-07T14:55:35 <kasparnet> and hi anastasia, btw :)
2014-11-07T14:55:36 <anastasiac> np, kasparnet. hi, anyways :-)
2014-11-07T14:56:14 <Bosmon> hey KASPPARNETT
2014-11-07T15:00:52 * simonjb joined the channel
2014-11-07T15:01:12 <kasparnet> hey antranig, so I actually think I figured it out
2014-11-07T15:01:25 <Bosmon> it?
2014-11-07T15:01:34 <Bosmon> I thought it was all fine
2014-11-07T15:01:40 <Bosmon> : P
2014-11-07T15:01:43 <kasparnet> I was just puzzled why you had wrapped the promise in the lifecyclemanagers start function in a function
2014-11-07T15:01:44 <kasparnet> (i
2014-11-07T15:01:55 <kasparnet> I\'m doing the merging of our branches, so resolving conflicts
2014-11-07T15:01:58 <kasparnet> )
2014-11-07T15:02:05 <Bosmon> Oh yes
2014-11-07T15:02:10 <Bosmon> There is a very important reason for that
2014-11-07T15:02:20 <Bosmon> If they are not wrapped, the promises will all start to resolve instantly
2014-11-07T15:02:42 <Bosmon> The "fluid.promise.sequence" algorithm can\'t reach backwards in time to hold up a promise that has already started to resolve
2014-11-07T15:02:57 <Bosmon> This will be interesting for colinclark\'s review too
2014-11-07T15:03:29 <Bosmon> So fluid.promise.sequence accepts a mixed array that contains either i) values, ii) promises, or iii) and iv) functions returning either of the first two
2014-11-07T15:04:04 <Bosmon> But only in the case of iv) a function returning a promise can it guarantee to "strictly serialize a set of tasks" - that is, to ensure that the next one doesn\'t start at all before the previous one finishes
2014-11-07T15:04:28 <Bosmon> Where we have a relatively clear model of "a task" as "a function returning a promise"
2014-11-07T15:04:35 <Bosmon> The invocation time of the function represents the "start of the task"
2014-11-07T15:04:44 <Bosmon> And the resolution time of the promise represents the "end of the tasak"
2014-11-07T15:04:45 <Bosmon> task
2014-11-07T15:05:11 <Bosmon> Should you just "happen to find a promise in your hands", you have no way of knowing how long it has been "in flight"
2014-11-07T15:06:03 * slim_jim joined the channel
2014-11-07T15:06:11 <Bosmon> And so another way of viewing the DataSource API is as a "task API" as well - since its API consists of "functions returning promises"
2014-11-07T15:06:29 <Bosmon> kasparnet, colinclark, Justin_o ^
2014-11-07T15:08:03 <kasparnet> Bosmon: that makes sense! Thanks for clearing that up
2014-11-07T15:08:59 <Justin_o> Bosmon: interesting
2014-11-07T15:09:13 <slim_jim> Bosmon so what *is* a "micro" promise?
2014-11-07T15:09:48 <Bosmon> slim_jim - well, it\'s just a normal promise, without any of the usual chaining, nesting and async resolution gubbins that traditionally comes with such a thing : P
2014-11-07T15:10:18 <colinclark> just a simple promise
2014-11-07T15:10:53 <Bosmon> In fact, it just consists of the following 50 lines of code: https://github.com/amb26/infusion/blob/FLUID-5513/src/framework/core/js/FluidPromises.js#L21-L69
2014-11-07T15:11:00 <colinclark> Looks to me like the new DOM Promises are also pretty \xe2\x80\x9cmicro\xe2\x80\x9d in nature
2014-11-07T15:11:07 <slim_jim> ah - lightweight - thought the chaining is powerful and makes easy to read code (though some implementations missed it out).
2014-11-07T15:11:48 <Justin_o> Bosmon: question for you.. i\'m trying to write tests for my latests incarnation of the dataSource queue and am struggling a bit as to what the best approach is. If you have some time to talk it out, that would be helpful
2014-11-07T15:11:59 <slim_jim> Yep, that\'s nice and minimal :)
2014-11-07T15:12:21 <Bosmon> Sure, Justin_o - what aspect of the tests seems difficult?
2014-11-07T15:12:56 <Bosmon> slim_jim - most of the other complex functionality provided by syntax in other libraries is provided by the tiny utility "fluid.promise.follow" on line 82
2014-11-07T15:14:23 <Justin_o> Bosmon: so ideally i\'d like to test the following: 1) that a request is added to the correct queue 2) that requests pass through the correct event points i.e. enqueued, dropped, onRequestStart, afterRequestComplete 3) for requests that are processed (not dropped), they are actually executed.
2014-11-07T15:15:07 * clown joined the channel
2014-11-07T15:15:30 <Justin_o> Bosmon: so some issues I\'m having with the above. Requests all look the same because they are put into queues based on their directModel, the requests need to be fired asynchronously so that we can have ones that are dropped and ones that are added.
2014-11-07T15:17:25 <Bosmon> Justin_o - I suggest that you apply two kinds of strategy i) the "log of activities" approach that we\'re already using a bit, an ii) a "permutation model" where you draw up all the possible alternative sequences of events and make sure that you test all of them
2014-11-07T15:17:48 <Bosmon> Justin_o - so, in order to distinguish the requests
2014-11-07T15:17:59 <Justin_o> so for i) i think you mean a fireRecord approach?
2014-11-07T15:18:06 <Bosmon> i) for "write" requests, these are easy to distinguish - since they can each have a different "model" that they are attempting to write
2014-11-07T15:18:15 <Justin_o> Bosmon: yes
2014-11-07T15:18:43 <Bosmon> ii) for "read" requests, the requests themselves can\'t be distinguished, but their time point of resolution can be - since you can provide an implicit model for your dataSource which updates on a regular basis - for example, one that increments every 100ms
2014-11-07T15:19:33 <Justin_o> I don\'t get this part "since you can provide an implicit model for your dataSource which updates on a regular basis - for example, one that increments every 100ms"
2014-11-07T15:19:45 <Justin_o> and how would we know that they requests are actually happening in the correct order
2014-11-07T15:19:55 <Justin_o> that is to say that old ones are replaced by new ones
2014-11-07T15:20:22 <Bosmon> And by adjusting your "time of flight" model to one that is convenient - e.g. one in which the time to reach the source is 0, and all the delay occurs on returning, you can determine exactly what contents they should have
2014-11-07T15:20:48 <Bosmon> Justin_o - there\'s no way to distinguish that, even in theory - since all the requests ARE the same!
2014-11-07T15:21:05 <Bosmon> Given they are the same, the detailed behaviour of the implementation in this regard is irrelevant
2014-11-07T15:21:39 <Justin_o> Bosmon: okay.. i guess that\'s true for delete and get
2014-11-07T15:21:45 <Justin_o> Bosmon: here is what i currently have
2014-11-07T15:21:48 <Justin_o> https://www.irccloud.com/pastebin/B9TpI1VY
2014-11-07T15:22:23 <Bosmon> Justin_o - cool - it\'s certainly looking much clearer than before
2014-11-07T15:22:23 <Justin_o> so i suppose one change would be to record the model along with the directModel in my record
2014-11-07T15:22:29 <Bosmon> Justin_o - yes
2014-11-07T15:23:03 <Bosmon> And to make dealing with the delays clearer, I suggest you draw up a way of encoding these declaratively, rather than embedding them in function code like your fluid.tests.queuedDataSource.requestFn
2014-11-07T15:23:24 <Bosmon> That is, make a data structure which is an array of elements, each of which has a field encoding the exact time point at which the request should occur
2014-11-07T15:23:30 <Bosmon> Something that colinclark would call..... a "score" : P
2014-11-07T15:23:42 <colinclark> ha!
2014-11-07T15:25:19 <Justin_o> Bosmon: something like [{requestType: "get", directModel: {}, when: 10}, ...]
2014-11-07T15:25:28 <Bosmon> Then you will just write a function that will generate "all possible interesting scores"
2014-11-07T15:25:36 <Bosmon> And then feed them into your "score player"
2014-11-07T15:25:39 <Bosmon> Justin_o - right
2014-11-07T15:26:00 <Bosmon> Or you could just encode the scores manually
2014-11-07T15:26:23 <colinclark> that\xe2\x80\x99ll be cool, Justin_o. I look forward to seeing your score structure! :)
2014-11-07T15:26:37 <Justin_o> Bosmon: okay.. i\'d still probably need to fake the delay for processing a request though.. so that things can get dropped from the queueu
2014-11-07T15:26:56 <Justin_o> colinclark: :) i don\'t think it will be too interesting  but we\'ll see
2014-11-07T15:28:38 <Bosmon> Justin_o - yes, you can encode the request processing delay too there if you like
2014-11-07T15:29:51 <Bosmon> So I adopted a particular convention for the dataSources that I put into Kettle, that might be helpful
2014-11-07T15:30:07 <Bosmon> In place of the "callback" argument, the dataSource can instead accept a freeform "options" structure
2014-11-07T15:30:20 <Bosmon> And if it finds one, instead of notifying a callback, it instead returns a promise
2014-11-07T15:30:32 <Bosmon> So you could use this "options" structure to encode the request processing delay for your tests
2014-11-07T15:31:24 <Justin_o> Bosmon: but wouldn\'t i have to build that into the requests queues start function as it\'s looking for a callback
2014-11-07T15:31:48 <Justin_o> Bosmon: here\'s the code for the request queue
2014-11-07T15:31:51 <Justin_o> https://www.irccloud.com/pastebin/eHojApwx
2014-11-07T15:32:06 <Bosmon> I noticed that there is a role for general "request options" that can affect request processing (perhaps in a non-portable way) but don\'t otherwise change the semantic
2014-11-07T15:32:26 <Bosmon> For example, one thing that we needed in Kettle was an option encoding "writeMethod", the HTTP method used to honour a "set" request
2014-11-07T15:32:45 <Bosmon> Now in theory, the DataSource could be responsible for deducing this by itself, which it might in some implementations
2014-11-07T15:33:08 <Bosmon> But you could also imagine other situations in which it would be clearer for the caller to violate encapsulation and simply tell the DataSource which method to use
2014-11-07T15:33:19 <Bosmon> So this is a good candidate for going into this "options" structure
2014-11-07T15:34:11 * kasparnet has quit
2014-11-07T15:34:16 <Bosmon> Justin_o - great - this is also looking hugely clearer as well
2014-11-07T15:34:28 <Bosmon> Hopefully you feel it is easier to read this implementation than the previous one too
2014-11-07T15:34:57 <Justin_o> Bosmon: I think so, yes
2014-11-07T15:35:24 <Bosmon> Justin_o - yes, you\'d need to encode this API difference into the structure of the queue itself
2014-11-07T15:35:39 <Justin_o> Bosmon: but i don\'t have scheme for returning promises..
2014-11-07T15:35:46 <Justin_o> or has that made it\'s way into infusion yet?
2014-11-07T15:35:50 <Bosmon> It\'s a bit awkward since despite how amazingly simple it is in theory, we never seem to quite get this "DataSource API" right
2014-11-07T15:36:07 <Bosmon> Justin_o - review is underway THIS MOMENT by colinclark : P
2014-11-07T15:36:20 <Bosmon> It should be in by Monday, in the meantime you can feel free to code against my FLUID-5513 branch
2014-11-07T15:36:21 <Justin_o> Bosmon: cool.. so i\'ll have to wait for that
2014-11-07T15:36:29 <Justin_o> before i can continue?
2014-11-07T15:36:33 <Bosmon> It will serve as helpful testing too
2014-11-07T15:37:22 <Bosmon> Justin_o - I think you could use it right away - it\'s already received a pretty good workout in the Kettle and GPII work so far
2014-11-07T15:37:34 <Bosmon> And any feedback you have will help for the review as well
2014-11-07T15:37:41 <Justin_o> Bosmon: okay :)
2014-11-07T15:37:44 <Justin_o> Bosmon: which branch is it in?
2014-11-07T15:38:00 <Bosmon> https://github.com/amb26/infusion/tree/FLUID-5513
2014-11-07T15:38:29 <Bosmon> https://github.com/fluid-project/infusion/pull/562
2014-11-07T15:38:41 <colinclark> Justin_o: That branch is currently #2 in my review queue (i.e. one tab to the right in my browser) :)
2014-11-07T15:38:46 <colinclark> but you should definitely use it right away
2014-11-07T15:39:06 <colinclark> and give me any feedback you have on it while I\xe2\x80\x99m reviewing it
2014-11-07T15:39:56 <Justin_o> Bosmon, colinclark: thanks
2014-11-07T15:40:19 * danaayotte joined the channel
2014-11-07T15:41:39 <anastasiac> Justin_o, I issued a pull request to fix that UIO documentation issue we discussed - to remove the incorrect instructions: https://github.com/fluid-project/infusion-docs/pull/36
2014-11-07T15:41:52 <anastasiac> that should go into the 1.5 version of the docs
2014-11-07T15:44:02 <Justin_o> Bosmon: is your branch up-to-date with master. I\'m getting some merge conflicts in the gruntfile and package.json
2014-11-07T15:44:22 <Bosmon> Justin_o - ok, let me update it
2014-11-07T15:44:28 <Justin_o> Bosmon: thanks
2014-11-07T15:45:30 * danaayotte has quit
2014-11-07T15:47:07 <Bosmon> ugghh.... somehow git is refusing to update...
2014-11-07T15:47:11 <Bosmon> What can be wrong with it ...
2014-11-07T15:47:27 <Justin_o> Bosmon: you mean your local git or you can\'t push to github?
2014-11-07T15:47:41 <Bosmon> Well, it claims my master is up to date
2014-11-07T15:47:50 <Bosmon> But it just doesn\'t agree with the one I see on github
2014-11-07T15:48:06 <Justin_o> Bosmon: your upstream/master may be up-to-date... did you merge that into your master
2014-11-07T15:48:34 <Justin_o> Bosmon: and then second question.. are your remotes correct... git remote -v
2014-11-07T15:48:54 <Justin_o> Bosmon:  if those are all okay i wonder if there is a cacheing issue or something like that happening somewhere
2014-11-07T15:49:20 <Bosmon> I run this command and get a peculiar response
2014-11-07T15:49:24 <Bosmon> $ git fetch origin master
2014-11-07T15:49:24 <Bosmon> From github.com:fluid-project/infusion
2014-11-07T15:49:24 <Bosmon> * branch            master     -> FETCH_HEAD
2014-11-07T15:49:38 <Bosmon> ah
2014-11-07T15:49:43 <Bosmon> This is just the wrong syntax isn\'t
2014-11-07T15:49:44 <Bosmon> it
2014-11-07T15:50:00 <Bosmon> But I wonder what this commanda actually does
2014-11-07T15:50:17 <Bosmon> here we go
2014-11-07T15:50:27 <Bosmon> Obviously "git fetch origin" is correct
2014-11-07T15:50:35 <Bosmon> But I wonder what FETCH_HEAD actually represents : P
2014-11-07T15:50:39 <Justin_o> i would think it just fetches the master branch from origin and nothing else
2014-11-07T15:50:53 <Bosmon> Well, it doesn\'t seem to have actually done that
2014-11-07T15:51:01 <jhung> anastasiac: fyi I have sent an email to avtar re: fluid sites.
2014-11-07T15:51:05 <Bosmon> Or if it has, it hasn\'t updated the contents of origin/master
2014-11-07T15:51:09 <Bosmon> Only the latter command did that
2014-11-07T15:51:13 <Justin_o> http://stackoverflow.com/questions/9237348/what-does-fetch-head-in-git-mean
2014-11-07T15:51:57 <Bosmon> Aha
'

b'2014-11-07T00:02:47 <jhernandez> ok, let me take a look at infusion\'s contexts docs
2014-11-07T00:03:17 <jhernandez> not sure if I\'m skilled enough to fix that
2014-11-07T00:03:56 <jhernandez> http://i1.kym-cdn.com/photos/images/original/000/234/765/b7e.jpg
2014-11-07T00:10:31 * colinclark joined the channel
2014-11-07T00:23:54 <jhernandez> Bosmon: I\'m not
2014-11-07T00:23:55 <jhernandez> xD
2014-11-07T00:24:31 <jhernandez> in any case, these tests (windows-specific) shouldn\'t be running on my humble linux box
2014-11-07T00:24:45 <Bosmon> jhernandez - that is incorrect
2014-11-07T00:24:52 <Bosmon> All tests now run on all platforms
2014-11-07T00:24:56 <jhernandez> oh!
2014-11-07T00:25:02 <Bosmon> That is the purpose of having **INTTEGGRATTION ***TTESTS******!
2014-11-07T00:25:11 <jhernandez> ok ok ok ok
2014-11-07T00:26:17 <Bosmon> hah, VERNANDEZ
2014-11-07T00:26:20 <Bosmon> You can\'t escape actually
2014-11-07T00:26:27 <Bosmon> By claiming that YOU NEVER KNEW ABOUT THIS ISSUE
2014-11-07T00:26:40 <jhernandez> hahahahaha
2014-11-07T00:26:41 <Bosmon> Since by looking in the history I found that you modified it on 3rd Feb 2014!!
2014-11-07T00:26:45 <Bosmon> YOU!
2014-11-07T00:26:47 <Bosmon> YOU DID IT!!
2014-11-07T00:26:48 <jhernandez> =
2014-11-07T00:26:49 <jhernandez> ?
2014-11-07T00:27:20 <jhernandez> oh
2014-11-07T00:27:22 <jhernandez> I remember
2014-11-07T00:28:08 <jhernandez> that happened that day we got all our jiras resolved :D
2014-11-07T00:55:34 * colinclark has quit
2014-11-07T01:34:48 <jhernandez> Bosmon: should that issue be fixed by doing something like this -> https://github.com/amb26/universal/blob/GPII-434/gpii/node_modules/lifecycleManager/test/js/LifecycleManagerTests.js#L25-L28?
2014-11-07T01:35:20 <Bosmon> jhernandez - yes
2014-11-07T01:36:51 <Bosmon> VVANTTUNEZZ
2014-11-07T01:36:58 <Bosmon> Thankfully the pace of node development seems to be slowing
2014-11-07T01:37:12 <Bosmon> It would be quite annoying if they released 0.12 just before we succeeded in finally migrating to 0.10
2014-11-07T01:38:06 <jhernandez> xD
2014-11-07T01:38:46 <jhernandez> as I read the other day in a node\'s issue at github, they\'re taking things with calm in relation to 0.12
2014-11-07T01:45:03 * Bosmon7 joined the channel
2014-11-07T02:12:25 * kasparne_ joined the channel
2014-11-07T02:15:54 * kasparnet has quit
2014-11-07T02:32:10 * kasparne_ has quit
2014-11-07T02:38:55 * kasparnet joined the channel
2014-11-07T02:39:48 * kasparnet has quit
2014-11-07T03:38:06 * colinclark joined the channel
2014-11-07T03:40:15 * colinclark has quit
2014-11-07T05:40:33 * kasparnet joined the channel
2014-11-07T05:44:46 * kasparnet has quit
2014-11-07T09:07:32 * kasparnet joined the channel
2014-11-07T09:12:19 * kasparne_ joined the channel
2014-11-07T09:15:05 * kasparne_ has quit
2014-11-07T09:15:55 * kasparne_ joined the channel
2014-11-07T09:15:59 * kasparnet has quit
2014-11-07T09:38:08 * slim_jim_ joined the channel
2014-11-07T09:41:31 * slim_jim has quit
2014-11-07T09:41:33 * slim_jim_ is now known as slim_jim
2014-11-07T10:46:07 * kasparne_ has quit
2014-11-07T10:59:11 * kasparnet joined the channel
2014-11-07T11:48:45 * kasparnet has quit
2014-11-07T11:49:39 * slim_jim has quit
2014-11-07T11:54:19 * kasparnet joined the channel
2014-11-07T12:38:34 * jhung joined the channel
2014-11-07T13:13:51 <kasparnet> amilchev:
2014-11-07T13:14:07 <kasparnet> I finally got the /update tests to work again, so now all tests are passing in my branch
2014-11-07T13:14:15 <amilchev> kasparnet: cool!
2014-11-07T13:14:17 * danaayotte joined the channel
2014-11-07T13:14:49 <kasparnet> amilchev: I pushed a preliminary version to my git repo .. will do some cleaning up now, but that\'s just cosmetic
2014-11-07T13:15:14 <amilchev> kasparnet: I\'m ready with PCP being able to render adjusters for the bold app terms in the spreadsheet with app terms
2014-11-07T13:15:31 <kasparnet> amilchev: Awesome!! That\'s really great news!
2014-11-07T13:15:45 <kasparnet> amilchev: nice to see things are actually coming together now
2014-11-07T13:16:05 <kasparnet> usually things tend to explode, not start working, this close to a deadline
2014-11-07T13:16:10 <amilchev> kasparnet: and they are rendered according to the format we talked about - now I have to make PCP send its model with the same format (shouldn\'t take long)
2014-11-07T13:16:28 <kasparnet> that\'s fantastic
2014-11-07T13:16:30 <kasparnet> cheers amilchev
2014-11-07T13:16:31 <amilchev> and after that I\'ll pull your 941 branch and start integrating
2014-11-07T13:16:58 <amilchev> kasparnet: heh yeah, cheers : ) hope not too many things break when combining the two repos
2014-11-07T13:17:56 * danaayotte has quit
2014-11-07T13:18:44 * colinclark joined the channel
2014-11-07T13:21:10 <Bosmon> Hey kasparnet!
2014-11-07T13:21:12 <Bosmon> Great news
2014-11-07T13:21:26 <kasparnet> hey Bosmon: yes indeed, I\'m so happy
2014-11-07T13:21:40 <kasparnet> your solution to the issue worked like a charm
2014-11-07T13:21:40 <Bosmon> Do you want to try merging up with my current branch now?
2014-11-07T13:21:48 <Bosmon> There should be some minor-ish conflicts
2014-11-07T13:21:52 <kasparnet> yeah - just cleaning up a bit
2014-11-07T13:21:56 <kasparnet> then I\'ll merge with your branch
2014-11-07T13:21:56 <Bosmon> great
2014-11-07T13:22:21 <kasparnet> Bosmon: except for the update test issue, it\'s generally been surprisingly painless to merge with your branch
2014-11-07T13:22:28 <kasparnet> so hoping it\'ll stay like that
2014-11-07T13:22:42 <Bosmon> Yes, there are only superficial changes
2014-11-07T13:23:00 <Bosmon> But the signature of many members in the LifecycleManager changed, and the LifecycleManagerServer was axed completely
2014-11-07T13:23:06 <Bosmon> So there will be a bit of cleanup necessary
2014-11-07T13:23:11 <kasparnet> ok
2014-11-07T13:23:36 <kasparnet> fuck... I just found out that the IntegrationTests.js arent all passing on my system
2014-11-07T13:23:43 <Bosmon> ok
2014-11-07T13:23:53 <Bosmon> You\'re not on linux, are you?
2014-11-07T13:23:54 <kasparnet> dont know if I somehow removed it, but they\'re not part of the tests/all-tests.js
2014-11-07T13:23:57 <kasparnet> nope
2014-11-07T13:24:00 <kasparnet> on mac
2014-11-07T13:24:02 <Bosmon> jhernandez found some minor issues last night
2014-11-07T13:24:03 <Bosmon> Ah
2014-11-07T13:24:09 <Bosmon> It will probably be the same reason
2014-11-07T13:24:13 <Bosmon> You can look at the IRC logs from last night
2014-11-07T13:24:17 <kasparnet> ok cool
2014-11-07T13:24:32 <Bosmon> GPII-497 which mysteriously got assigned to VANTTUNNEZ
2014-11-07T13:28:34 <jhernandez> Bosmon: yeah, perhaps it\'s because I\'m the default assignee for the linux components?
2014-11-07T13:28:42 <jhernandez> dunno
2014-11-07T13:30:53 <jhernandez> anyhoo, I\'m sure that you Bosmon and kasparnet are better than me in addressing that jira
2014-11-07T13:32:18 <kasparnet> jhernandez: yeah, probably!
2014-11-07T13:32:53 <kasparnet> is this something that you have already been touching upon in the windows fixing, Bosmon?
2014-11-07T13:34:00 <Bosmon> kasparnet - no, nothing done about this
2014-11-07T13:34:05 <Bosmon> it only affects platforms other than windows
2014-11-07T13:34:11 <kasparnet> ok
2014-11-07T13:34:12 <Bosmon> We just need to write a couple more mocks
2014-11-07T13:35:38 <kasparnet> ok - so the expander needs to be mocked? (the environment and registry ones)?
2014-11-07T13:36:40 <Bosmon> Yes
2014-11-07T13:36:54 <Bosmon> We already have a halfway mock in our LifecycleManagerTests.js
2014-11-07T13:42:01 * Justin_o joined the channel
2014-11-07T13:45:43 <kasparnet> ok
2014-11-07T13:46:55 * anvk joined the channel
2014-11-07T13:47:28 <kasparnet> Bosmon: 17 conflicts :)
2014-11-07T13:58:53 <amilchev> kasparnet: quick one: will PCP visualize only the application terms in the speadsheet or could it be forced to show something like
2014-11-07T13:58:53 <amilchev> "com.mozilla.firefox": {
2014-11-07T13:58:53 <amilchev> "settings": {
2014-11-07T13:58:53 <amilchev> "http://registry.gpii.net/common/volume": 300
2014-11-07T13:58:53 <amilchev> }
2014-11-07T13:58:53 <amilchev> }
2014-11-07T13:59:27 <amilchev> which is a ".../common/..." term for an application
2014-11-07T14:00:42 <kasparnet> I think the decision was that all /common/ terms could theoretically be sent to the PCP from the MMs (but always in the context of an app)
2014-11-07T14:01:02 <kasparnet> but we could check with claudia to see if she\'s actually planning on doing this
2014-11-07T14:01:11 <kasparnet> is it much extra work, or is it trivial for you?
2014-11-07T14:01:22 <kasparnet> the flowmanagers /update function will support it
2014-11-07T14:01:24 <kasparnet> amilchev: ^
2014-11-07T14:02:13 <amilchev> kasparnet: how trivial it is depends on this question
2014-11-07T14:02:21 <amilchev> what\'s the difference between e.g.
2014-11-07T14:02:57 <amilchev> http://registry.gpii.net/applications/org.gnome.desktop.interface/cursor-size
2014-11-07T14:02:59 <amilchev> and
2014-11-07T14:04:12 <amilchev> "org.gnome.desktop.interface": {
2014-11-07T14:04:12 <amilchev> "settings": {
2014-11-07T14:04:12 <amilchev> "http://registry.gpii.net/common/cursorSize": 3
2014-11-07T14:04:12 <amilchev> }
2014-11-07T14:04:12 <amilchev> }
2014-11-07T14:04:28 <amilchev> kasparnet: ^
2014-11-07T14:05:18 <amilchev> if they are the same (which I doubt), then it\'s trivial enough, if they are different - it\'s unplanned work I\'ll need to think about
2014-11-07T14:11:05 <kasparnet> the first one is an application setting, specific to the org.gnome.desktop.interface application
2014-11-07T14:11:26 <kasparnet> and we pass the cursor-size setting directly to the settingshandler for that app
2014-11-07T14:12:18 <kasparnet> whereas the second case is a common term, which will go through a translation process in the lifecycle manager before getting passed to the settingshandler
2014-11-07T14:14:28 * heidiv joined the channel
2014-11-07T14:15:38 <amilchev> kasparnet: well PCP currently can render common terms altogether with app specific ones
2014-11-07T14:15:58 <amilchev> (barely tested, but "theoretically" can)
2014-11-07T14:16:35 <amilchev> however, neither PCP nor PMT have ever classified a common term to an application
2014-11-07T14:17:51 <amilchev> so if we want to make the PCP treat all these adequately, we\'ll need to make it able to put a "layer" on top of a common term, specifying its application
2014-11-07T14:18:54 <amilchev> and when PCP receives/sends any settings, it should be able to make this app <-> common term connection
2014-11-07T14:19:12 <amilchev> which asks the question "what do we do if we want to show fontSize common term for 2 apps?"
2014-11-07T14:24:33 <amilchev> then I make an ugly face knowing that it would need quite a lot of time and it\'s impossible for...2 days
2014-11-07T14:25:50 <amilchev> so, up to Tuesday, PCP will only expect these BOLD ones https://docs.google.com/spreadsheets/d/1zubrNlSFVUtD5aks2KKe7ZhB33mw_3Ua86BrqG7Zqg0/edit?usp=sharing
'

