b'2017-03-09T13:10:41 <simonjb> :)
2017-03-09T13:11:18 <javjarfer> thanks you!
2017-03-09T13:12:36 * cindyli joined the channel
2017-03-09T13:12:53 <simonjb> javjarfer: you are very welcome! the FakeSensor.js generates a sine wave and you can also see the drivers for the Atlas Scientific sensors in https://github.com/simonbates/nexus-demos/tree/master/science-lab/atlas-scientific-driver
2017-03-09T13:14:30 * Justin_o joined the channel
2017-03-09T13:14:45 <simonjb> the sensor integrations make use of a fluid component grade for connecting to the Nexus: https://github.com/simonbates/nexus-client/blob/master/src/NexusWebSocketBoundComponent.js
2017-03-09T13:14:56 <simonjb> over websocket
2017-03-09T13:20:43 <javjarfer> nice, I wanted to try the custom components with websockets!
2017-03-09T13:20:58 * kasparnet has quit
2017-03-09T13:22:18 * kasparnet joined the channel
2017-03-09T13:24:17 * gtirloni_ joined the channel
2017-03-09T13:29:36 * gtirloni__ joined the channel
2017-03-09T13:35:54 * kasparnet has quit
2017-03-09T13:42:42 <colinclark> simonjb: your fake sine wave is awesome
2017-03-09T13:45:34 <simonjb> thanks colinclark :) I wanted an easy to exercise Nexus stuff without needing the physical sensors
2017-03-09T13:50:57 <colinclark> yep, it makes a lot of sense
2017-03-09T13:51:52 * gtirloni joined the channel
2017-03-09T13:54:54 * jhung joined the channel
2017-03-09T14:03:28 * sirdancealot has quit
2017-03-09T14:07:11 * alanharnum joined the channel
2017-03-09T14:39:30 * avtar joined the channel
2017-03-09T14:55:48 * danayo joined the channel
2017-03-09T15:00:05 * alanharn_ joined the channel
2017-03-09T15:06:22 * michelled joined the channel
2017-03-09T15:15:49 * the-t-in-rtf joined the channel
2017-03-09T15:16:35 * the-t-in-rtf has left the channel
2017-03-09T15:16:43 * the-t-in-rtf joined the channel
2017-03-09T15:18:51 <the-t-in-rtf> Thanks @amatas, trying the bin-links stuff now.
2017-03-09T15:21:37 <the-t-in-rtf> @amatas, actually the command I\'m running is a "git" command, and I see the same error.
2017-03-09T15:22:04 * danayo joined the channel
2017-03-09T15:23:48 <the-t-in-rtf> Apparently there\'s another option for git: "git config core.symlinks true"
2017-03-09T15:40:11 <the-t-in-rtf> Setting that locally doesn\'t work, and setting it globally doesn\'t help with the problem.
2017-03-09T15:44:35 <avtar> the-t-in-rtf: which repo are you using?
2017-03-09T15:44:54 <the-t-in-rtf> try running git in /vagrant on a windows VM
2017-03-09T15:44:56 <the-t-in-rtf> it doesn\'t matter.
2017-03-09T15:45:09 <the-t-in-rtf> it has a similar problem, but there\'s no way to reconfigure it, apparently.
2017-03-09T15:46:52 <the-t-in-rtf> you can run some commands from another directory, but you can\'t run anything from the repo directory itself.
2017-03-09T15:47:04 <the-t-in-rtf> you get another "Function not implemented" message.
2017-03-09T15:48:52 * javjarfer has quit
2017-03-09T15:53:29 <avtar> the-t-in-rtf: ah interesting
2017-03-09T15:53:47 <avtar> so far i\'ve only run git commands on the host in the shared directory
2017-03-09T15:53:57 <avtar> i\'ll give this a shot
2017-03-09T15:54:46 <the-t-in-rtf> So, seemingly, if I mount the share as a network drive (say V:) I can run commands.
2017-03-09T15:55:05 <the-t-in-rtf> git, and presumably npm
2017-03-09T15:55:20 <the-t-in-rtf> Is there any technical reason which it\'s done as a symlink?
2017-03-09T15:55:31 <the-t-in-rtf> s/which/why/
2017-03-09T15:57:11 <the-t-in-rtf> what do you mean by "in the shared directory"?
2017-03-09T15:58:54 <avtar> the-t-in-rtf: i meant i\'ve only run git commands on the host in the directory that\'s being shared with a windows vm
2017-03-09T15:59:14 <avtar> i haven\'t had to run git commands in the vm itself yet
2017-03-09T16:00:32 <the-t-in-rtf> ah.
2017-03-09T16:00:39 <the-t-in-rtf> so you ran the commands on the host.
2017-03-09T16:00:44 <the-t-in-rtf> got it.
2017-03-09T16:01:37 <the-t-in-rtf> OK, with my second workaround, the first workaround results in a clone of the shared directory that is usable.
2017-03-09T16:01:43 <the-t-in-rtf> running the tests now to confirm.
2017-03-09T16:05:41 <the-t-in-rtf> Anyway, I\'ll follow up with you all tomorrow, time to cook dinner.
2017-03-09T16:12:08 * mrtyler joined the channel
2017-03-09T16:13:10 * clown joined the channel
2017-03-09T16:39:22 * javjarfer joined the channel
2017-03-09T16:48:31 * clown trying to wave in vidyo but my hand was nowhere near the camera \xe2\x80\x94 no I wasn\'t having a seizure.
2017-03-09T17:01:13 * alanharn_ joined the channel
2017-03-09T17:31:31 <Justin_o> Bosmon: i sent an e-mail to the fluid-work list about URLs in HTML fragments.. i wonder if you might have some thoughts on that
2017-03-09T17:35:03 * kasparnet joined the channel
2017-03-09T17:50:25 * clown joined the channel
2017-03-09T18:01:12 * kathy joined the channel
2017-03-09T18:13:23 * stegru has quit
2017-03-09T18:13:34 * simonjb joined the channel
2017-03-09T18:15:06 * michelled joined the channel
2017-03-09T18:26:55 * javjarfer has quit
2017-03-09T18:27:04 * michelled joined the channel
2017-03-09T18:30:30 * avtar joined the channel
2017-03-09T18:32:39 * cindyli joined the channel
2017-03-09T18:36:58 * grass joined the channel
2017-03-09T18:55:52 * jessm joined the channel
2017-03-09T18:59:23 * stegru joined the channel
2017-03-09T19:03:21 * alanharn_ joined the channel
2017-03-09T19:07:35 * the-t-in-rtf joined the channel
2017-03-09T19:13:29 * sirdancealot joined the channel
2017-03-09T19:33:25 * alanharnum joined the channel
2017-03-09T19:51:01 * simonjb has quit
2017-03-09T19:56:40 * kavya joined the channel
2017-03-09T19:59:34 * scott_gonzalez has quit
2017-03-09T20:03:34 * scott_gonzalez joined the channel
2017-03-09T20:04:55 * danayo joined the channel
2017-03-09T20:08:36 * clown joined the channel
2017-03-09T20:43:04 * kavya has quit
2017-03-09T21:05:08 * alanharn_ joined the channel
2017-03-09T21:10:49 * danayo joined the channel
2017-03-09T21:29:33 * danayo joined the channel
2017-03-09T22:33:53 * noveens joined the channel
2017-03-09T22:36:56 * kasparnet has quit
2017-03-09T22:42:31 * kasparnet joined the channel
2017-03-09T22:51:51 * kasparnet has quit
2017-03-09T23:03:52 * amatas has quit
2017-03-09T23:06:24 * alanharnum joined the channel
2017-03-09T23:39:21 * Justin_o has quit
2017-03-09T23:39:57 * sirdancealot has quit
2017-03-09T23:45:22 * stegru has quit
'

b'2017-03-09T09:30:17 <Bosmon> voodoo :)
2017-03-09T09:30:21 <stegru> ah
2017-03-09T09:30:28 <javjarfer> that is huge faster xD
2017-03-09T09:30:33 <javjarfer> also, when you selected line 936, the one of removing the childs
2017-03-09T09:30:48 <Bosmon> Well, I succeeded in optimising listeners and invokers by perhaps 60-100x, a couple of years ago
2017-03-09T09:30:53 <Bosmon> But this will be a far, far harder task
2017-03-09T09:31:17 <Bosmon> And ironically that optimisation probably deoptimised component construction by a fair amount more
2017-03-09T09:31:23 <javjarfer> this is doing a local search?
2017-03-09T09:31:34 <Bosmon> Yes
2017-03-09T09:31:48 <Bosmon> I\'ve tinkered with various "rearranging the deckchairs on the titanic" improvements to this function
2017-03-09T09:32:06 <Bosmon> But none of them made it significantly better, and some made it significantly worse
2017-03-09T09:32:21 <javjarfer> okay...
2017-03-09T09:32:46 * stegru- has quit
2017-03-09T09:32:47 <Bosmon> I guess the benchmark is sufficiently boneheaded that I could just try removing the deletion entirely and perhaps the framework will not crash : P
2017-03-09T09:32:49 <Bosmon> Let me try :)
2017-03-09T09:32:56 <javjarfer> "fluid.each(childShadow.contextHash" what represents this?
2017-03-09T09:33:25 <javjarfer> that could be very revealing
2017-03-09T09:34:42 <Bosmon> UGG
2017-03-09T09:34:44 <Bosmon> IT IS NOT LIES
2017-03-09T09:34:52 <Bosmon> I removed the deletion entirely and performance improved by perhaps 2x : P
2017-03-09T09:35:02 <Bosmon> ARGH ARGH ARGH ARGH
2017-03-09T09:35:34 <javjarfer> omg why on earth then It will mark 25% of time wasted?
2017-03-09T09:35:56 <Bosmon> DO NOT DELETE THINGS EVER
2017-03-09T09:36:09 <javjarfer> xddddd
2017-03-09T09:36:27 <Bosmon> Perhaps some variety of colinclark\'s idea is the right one
2017-03-09T09:36:36 <Bosmon> But I can\'t on the face of it think of a way of making this work without deletions
2017-03-09T09:36:39 <stegru> or, delete things later when you\'re code isn\'t doing anything.. then soon you\'ll have your own GC
2017-03-09T09:36:50 <Bosmon> Perhaps I will go back to bed and let this stew further : P
2017-03-09T09:37:02 <Bosmon> Perhaps we can have some kind of "hopscotch tombstones"
2017-03-09T09:37:30 <Bosmon> Removing this deletion brings the Firefox and Chrome traces into substantial agreement
2017-03-09T09:37:51 <Bosmon> And also speeds up the Chrome instantiation performance by perhaps 2x in the worst case
2017-03-09T09:38:05 <stegru> so it\'s chromes implementation of delete that\'s slow?
2017-03-09T09:39:07 <the-t-in-rtf> @amatas, I managed to work around various problems running the infusion Vagrant tests by updating my Virtualbox and Vagrant
2017-03-09T09:39:22 <the-t-in-rtf> however, now the plugin doesn\'t seem to work for me.
2017-03-09T09:39:43 <Bosmon> https://github.com/petkaantonov/bluebird/wiki/Optimization-killers
2017-03-09T09:39:53 <the-t-in-rtf> I have Vagrant 1.9.2 and Virtualbox 5.1.14
2017-03-09T09:39:58 <Bosmon> In the thick of this page it warns vaguely about deletions
2017-03-09T09:40:20 <the-t-in-rtf> $ vagrant up
2017-03-09T09:40:20 <the-t-in-rtf> WARNING: env not declared in the definition file
2017-03-09T09:40:20 <the-t-in-rtf> Bringing machine \'default\' up with \'virtualbox\' provider...
2017-03-09T09:40:20 <the-t-in-rtf> There are errors in the configuration of this machine. Please fix
2017-03-09T09:40:20 <the-t-in-rtf> the following errors and try again:
2017-03-09T09:40:21 <the-t-in-rtf> vm:
2017-03-09T09:40:22 <the-t-in-rtf> * A box must be specified.
2017-03-09T09:40:24 <javjarfer> Bosmon, have you considered nulling the values instead of deleting?
2017-03-09T09:40:35 <Bosmon> javjarfer - see my response to colinclark above
2017-03-09T09:40:35 <the-t-in-rtf> Seems like it\'s picking up the config, which hasn\'t changed.
2017-03-09T09:40:38 <the-t-in-rtf> Any advice?
2017-03-09T09:41:02 <javjarfer> Bosmon, searching
2017-03-09T09:41:29 <colinclark> My thought was that even nulling may cause the shape of the object to change
2017-03-09T09:41:41 <colinclark> you may well need to ensure that all values "look alike"
2017-03-09T09:41:43 <Bosmon> colinclark - I think it won\'t
2017-03-09T09:41:45 <colinclark> whatever this actually means in practice
2017-03-09T09:41:48 <colinclark> cool
2017-03-09T09:41:55 <Bosmon> Since we know that null is implemented in a strange way in JS :)
2017-03-09T09:41:57 <Bosmon> Let me try
2017-03-09T09:42:08 <stegru> just delete them outside the loop in one go?
2017-03-09T09:42:11 <colinclark> the other question, I hate to ask, is which optimizer are you using in your Chrome?
2017-03-09T09:42:18 <colinclark> I believe they\'re right on the verge of releasing the new one?
2017-03-09T09:42:23 <colinclark> or perhaps have in some cases?
2017-03-09T09:42:33 <Bosmon> colinclark - yes, nulling it is roughly as fast as doing nothing
2017-03-09T09:42:40 <javjarfer> yes... I don\'t know, but my feeling was that it will not see the references the next time GC is triggered, and not forced by an actual reference deletion
2017-03-09T09:42:44 <colinclark> interesting
2017-03-09T09:42:59 <Bosmon> Yes, pretty interesting, hey
2017-03-09T09:43:00 <javjarfer> but it\'s totally guessing because I have NO IDEA XD
2017-03-09T09:43:13 <Bosmon> In fact this scope algorithm is bugged anyway
2017-03-09T09:43:58 <Bosmon> Perhaps we could have "lazy tombstone cleanup"
2017-03-09T09:44:10 <javjarfer> stegru, pushing all together and them deleting at once you mean?
2017-03-09T09:44:47 <javjarfer> I don\'t know how to do that in js without leaving extra references behind... maybe there is a way
2017-03-09T09:44:57 <javjarfer> (which will be really cool xD)
2017-03-09T09:46:09 <javjarfer> omg! I didn\'t read it, and what about memory consumption?
2017-03-09T09:46:13 <javjarfer> goes up like crazy?
2017-03-09T09:51:42 <Bosmon> YES
2017-03-09T09:51:47 <Bosmon> I think we can afford LAZY TOMBSTONE CLEANUP
2017-03-09T09:52:08 <Bosmon> I inserted an "if (context === null)" check inside fluid.resolveContext, and performance has not changed at all
2017-03-09T09:52:18 <Bosmon> So we can stick all the cleanup in there
2017-03-09T09:52:55 <Bosmon> Ok, disposing of this silliness means that I can start thinking about PROPER OPTIMISATIONS :)
2017-03-09T09:53:35 <the-t-in-rtf> Isn\'t time itself a form of lazy tombstone cleanup?
2017-03-09T09:55:09 <the-t-in-rtf> just leave it.  Eventually there will just be bits of stone and a plaque that reads "look on my works ye mighty, and despair"
2017-03-09T09:55:09 <javjarfer> Bosmon, that is great!
2017-03-09T09:55:32 <javjarfer> Do you mean it\'s time for some architectural optimizations?
2017-03-09T09:56:28 <Bosmon> Yes
2017-03-09T09:56:50 <Bosmon> I\'ve been starting to think about "combined memoisation and stencilling"
2017-03-09T09:56:56 <Bosmon> What you could call the kind of "Infusion compiler"
2017-03-09T09:58:30 <javjarfer> ohh compiler work, really cool
2017-03-09T09:58:57 <Bosmon> Firefox is such a complete dog.....
2017-03-09T10:00:33 <Bosmon> But, interestingly, removing this "delete" has essentially no effect on it
2017-03-09T10:01:32 <javjarfer> Bosmon, really? What a weird behavior
2017-03-09T10:01:59 <stegru> perhaps it effectively sets it to null, and does the actual cleanup in another thread or later on
2017-03-09T10:02:03 <javjarfer> so, maybe they are not removing actual references when deleting, and that is all the fast they can go?
2017-03-09T10:05:43 <amatas> the-t-in-rtf, the latests version of the Vagrant plugin has removed the ".ci_" of the main statements to simplify the names. That is something that we have discussed at the ops meetings. I hope to not change those statements any more in the future.
2017-03-09T10:06:16 <amatas> the-t-in-rtf, https://github.com/amatas/vagrant-gpii-ci#samples
2017-03-09T10:06:27 <the-t-in-rtf> I am working with the same version as yesterday
2017-03-09T10:06:28 <amatas> .ci_env is now only "env"
2017-03-09T10:06:29 <the-t-in-rtf> and the same filename
2017-03-09T10:06:45 <the-t-in-rtf> .vagrant.yml
2017-03-09T10:06:56 <amatas> you mean Vagrant-gpii-ci 0.0.5?
2017-03-09T10:06:58 <the-t-in-rtf> Let me check that last bit.
2017-03-09T10:07:03 <the-t-in-rtf> 0.0.6
2017-03-09T10:07:12 <amatas> .ci_stages is now only "stages"
2017-03-09T10:07:30 <the-t-in-rtf> Ah, that\'s it.
2017-03-09T10:07:35 <the-t-in-rtf> Thanks!
2017-03-09T10:07:37 <amatas> sorry for that change
2017-03-09T10:07:49 <amatas> yw
2017-03-09T10:07:50 <the-t-in-rtf> is it "stages" or ".stages"?
2017-03-09T10:08:11 <the-t-in-rtf> Also, ".env" or "env"?
2017-03-09T10:08:13 <amatas> I\'m glad to see that most of the problems that you had are solved with the new versions
2017-03-09T10:08:21 <amatas> without the dot
2017-03-09T10:08:30 <the-t-in-rtf> yup
2017-03-09T10:08:45 <the-t-in-rtf> Well, the main one with CRs isn\'t, but at least I can test my workaround.
2017-03-09T10:09:28 <amatas> I was just waiting for an Avtar\'s report to send the release of the plugin to the Arch mailing list
2017-03-09T10:15:56 <the-t-in-rtf> I\'m still getting the same errors as Avtar: "fatal: Invalid symlink \'C:/vagrant\': Function not implemented"
2017-03-09T10:16:02 <the-t-in-rtf> Any news on that?
2017-03-09T10:19:20 <javjarfer> stegru, I don\'t know if we can do the "actual" cleanup in other thread will be a good idea, I think that maybe what we have saw it\'s that is better to leave V8 runtime do the cleanup when he wants without bothering him too much xD, maybe Bosmon can confirm
2017-03-09T10:22:35 <stegru> javjarfer: I was speculating that\'s how firefox implemented it
2017-03-09T10:23:49 <javjarfer> stegru, omg what happens to me today, I didn\'t read it well, I just repeated what you said in the next sentence
2017-03-09T10:24:05 <stegru> heh
2017-03-09T10:24:38 <javjarfer> xD
2017-03-09T10:25:26 * kasparnet joined the channel
2017-03-09T10:27:17 <amatas> the-t-in-rtf, https://gitlab.com/p4a-test/infusion/blob/testing-gpii-webdriver/.vagrant.yml#L23
2017-03-09T10:27:25 <amatas> ups, he\'s gone
2017-03-09T10:39:50 * jhernandez joined the channel
2017-03-09T10:48:02 * sirdancealot joined the channel
2017-03-09T10:56:08 * alanharnum joined the channel
2017-03-09T11:30:39 * colinclark joined the channel
2017-03-09T11:57:19 * alanharnum joined the channel
2017-03-09T12:17:56 * kasparnet has quit
2017-03-09T12:24:15 * Jess__ joined the channel
2017-03-09T12:29:36 * simonjb joined the channel
2017-03-09T12:36:21 * kasparnet joined the channel
2017-03-09T12:53:27 * kasparnet has quit
2017-03-09T12:55:12 <javjarfer> simonjb, I have just looked to the video again! It\'s really cool, it\'s very difficult to make that setup?
2017-03-09T12:58:13 * alanharnum joined the channel
2017-03-09T13:03:38 <simonjb> javjarfer: it should be pretty easy (other than needing the sensors -- but I have also a "FakeSensor" program)
2017-03-09T13:03:52 * kasparnet joined the channel
2017-03-09T13:04:02 <simonjb> javjarfer: I should write up a readme in my repo
2017-03-09T13:04:10 <simonjb> but you would need:
2017-03-09T13:05:07 <simonjb> 1) https://github.com/simonbates/fluid-authoring/tree/GPII-2305
2017-03-09T13:05:38 <simonjb> 2) https://github.com/simonbates/nexus-demos
2017-03-09T13:06:22 <simonjb> 3) in fluid-authoring, run: node visibleNexus.js
2017-03-09T13:07:37 <simonjb> (but take care running the Nexus like this as it opens up a remote code execution vulnerability -- see note on https://github.com/GPII/nexus/)
2017-03-09T13:08:24 <simonjb> 4) in nexus-demos, run: node science-lab/ConstructScienceLabPeersAndRecipes.js
2017-03-09T13:08:37 * gtirloni joined the channel
2017-03-09T13:09:00 <simonjb> 5) open http://localhost:9081/visible-nexus/visibleNexus.html to see the visualization of the Nexus
2017-03-09T13:09:21 <simonjb> 6) in nexus-demos, run: node science-lab/FakeSensor.js
2017-03-09T13:09:41 <simonjb> steps 4 and 5 can be reversed
2017-03-09T13:10:04 * colinclark joined the channel
2017-03-09T13:10:10 <javjarfer> oh! looks pretty straightforward, so if I want to add my own sensors I only need to make my own "FakeSensor.js"?
2017-03-09T13:10:18 <simonjb> yes
2017-03-09T13:10:35 <javjarfer> haha I see an upcoming weekend project
'

b'2017-03-09T00:17:18 * kasparnet joined the channel
2017-03-09T00:21:58 * kasparnet has quit
2017-03-09T00:56:12 * javjarfer has quit
2017-03-09T01:48:13 * alanharnum joined the channel
2017-03-09T03:49:46 * alanharnum joined the channel
2017-03-09T05:51:41 * alanharnum joined the channel
2017-03-09T07:22:10 * jhernandez has quit
2017-03-09T07:27:08 * amatas joined the channel
2017-03-09T07:33:56 * kasparnet joined the channel
2017-03-09T07:53:30 * alanharnum joined the channel
2017-03-09T07:58:37 * kasparnet has quit
2017-03-09T08:14:35 * javjarfer joined the channel
2017-03-09T08:44:54 * stegru joined the channel
2017-03-09T08:51:36 * colinclark joined the channel
2017-03-09T08:53:34 <javjarfer> Hi everyone, I have been able to debug the problem with the "strange exec behavior", and there wasn\'t any strange behavior xD. We managed to escape things well, the problem was related with \'timing\', this particular application I was managing, hooks a behavior in a process, and when the lifecycle handle triggers the previous command, a certain (undefined) amount of time should be passed before the hook is executed, and just then, this command
2017-03-09T08:53:34 <javjarfer> should be launched
2017-03-09T08:54:51 <javjarfer> Of course I wasn\'t expected that behavior until I have started to looked for other explanations than the escaping ones
2017-03-09T08:54:52 * alanharnum joined the channel
2017-03-09T08:55:00 <stegru> nice one
2017-03-09T08:56:34 <javjarfer> stegru, true? xD Now it leaves me with one question, until we see Kasper life-cycle handlers as components (as Bosmon) told me days ago, there is no way to address this that isn\'t in a external way true?
2017-03-09T08:57:24 <javjarfer> Also, when I trigger the script, it worked, now I think that it simply worked because the needed delay to spawn the process of the script
2017-03-09T08:58:09 <stegru> yeh, so it worked by accident
2017-03-09T08:58:15 <javjarfer> totally
2017-03-09T08:58:17 <javjarfer> xDDDD
2017-03-09T08:58:19 <Bosmon> Hi there javjarfer - no, unfortunately until we have kaspernet\'s fix, you will have to do something appalling like polling and blocking
2017-03-09T08:58:44 <javjarfer> Bosmon, great, no problem, I will do a busy waiting in the script until certain conditions are met
2017-03-09T08:58:53 <Bosmon> javjarfer - what do the conditions look like?
2017-03-09T08:59:14 <javjarfer> I guess I should wait for that particular process to be spawn again
2017-03-09T08:59:24 <Bosmon> ok
2017-03-09T08:59:31 <Bosmon> stegru has some code for that already ready-made :)
2017-03-09T08:59:38 <Bosmon> You will just have to de-asyncify it
2017-03-09T08:59:53 <javjarfer> Bosmon, oh great!
2017-03-09T09:00:01 <stegru> have a look in the processHandling.js file
2017-03-09T09:00:09 <Bosmon> And you did not see me here at 9am btw
2017-03-09T09:00:24 <javjarfer> stegru, ok, thanks you
2017-03-09T09:00:28 <javjarfer> Bosmon, hahaha
2017-03-09T09:00:34 <javjarfer> okay
2017-03-09T09:01:00 <stegru> I\'m guessing it\'s late, rather than early
2017-03-09T09:01:08 <Bosmon> I started staring at some profile traces of the framework last night
2017-03-09T09:01:16 <Bosmon> And am still trying to make some sense of the total nonsense that I saw
2017-03-09T09:02:22 <stegru> javjarfer: there\'s gpii.windows.waitForProcessStart..
2017-03-09T09:02:45 <stegru> and there\'s also gpii.windows.waitForCondition which is basically an async while loop
2017-03-09T09:02:59 <Bosmon> The Chrome profiler claims that something like 25% of the total CPU time is spent on this line: https://github.com/fluid-project/infusion/blob/master/src/framework/core/js/FluidIoC.js#L936
2017-03-09T09:03:06 <Bosmon> Which is i) obviously impossible
2017-03-09T09:03:19 <Bosmon> ii) highly unwelcome, since this is one of the most important optimisations in the framework : P
2017-03-09T09:03:25 <javjarfer> omg profiling love it
2017-03-09T09:03:42 <Bosmon> WHEREAS the Firefox profiler doesn\'t even FEATURE THIS ENTIRE FUNCTION AT ALL
2017-03-09T09:03:53 <javjarfer> hahahah runtime magic
2017-03-09T09:04:19 <Bosmon> Clearly both of them are lying horribly, just in different ways
2017-03-09T09:04:48 <javjarfer> haha well, a runtime lying about metrics, I don\'t know it that could even be reported xD
2017-03-09T09:04:50 <Bosmon> But it\'s rather hard to know how to start optimising when you are faced with a profiler trace which consists of maybe 50% lies
2017-03-09T09:05:13 <Bosmon> Anyway, I have started to think about how to start optimising
2017-03-09T09:05:14 <javjarfer> Bosmon, yes... It\'s a hard task
2017-03-09T09:05:19 <Bosmon> Hence the fact I am not sleeping : P
2017-03-09T09:06:15 <Bosmon> Both of the profilers agree that this loop is a major culprit: https://github.com/fluid-project/infusion/blob/master/src/framework/core/js/FluidIoC.js#L1827
2017-03-09T09:06:41 <Bosmon> Which is very, very tough given the really undesirable mixture of stuff in it
2017-03-09T09:07:09 <stegru> it\'s quite a big loop
2017-03-09T09:07:45 <Bosmon> It\'s also an appalling garbage bomb
2017-03-09T09:08:18 <stegru> for the first one, is it the loop or just line 936 that\'s taking long?
2017-03-09T09:08:19 <javjarfer> Bosmon, that particular line it\'s interesting, it\'s the "GC"?
2017-03-09T09:08:33 <Bosmon> javjarfer - I think that a huge amount of what I am seeing is really the GC
2017-03-09T09:08:53 <javjarfer> But the system GC or javascript ones?
2017-03-09T09:09:02 <Bosmon> Including the fact that Chrome hates that dictionary-mode lookup in clearChildrenScope
2017-03-09T09:09:23 <Bosmon> I think what is happening is that the profiler can\'t properly account for "deoptimisation time"
2017-03-09T09:09:40 <Bosmon> And instead randomly assigns some fraction of general GC time to a site where there is a lot of deoptimisation
2017-03-09T09:10:19 <Bosmon> So I think that I will not take seriously Chrome\'s idea that 25% of general time is spent on this line, but simply make efforts to reduce GC as a whole
2017-03-09T09:11:30 <javjarfer> Bosmon, okay, okay so you think that in that place is when general GC is taking place and that\'s is why you are seeing that incredibly amount of cycles wasted there no?
2017-03-09T09:12:03 <javjarfer> I thought that V8 lets you know when it\'s doing GC pauses
2017-03-09T09:12:08 <Bosmon> Something like that, yes
2017-03-09T09:12:28 <Bosmon> Yes, it should, but I think something has gone wrong with its accounting in this case
2017-03-09T09:12:39 <Bosmon> Since it is not garbage generated by user code but by the runtime itself
2017-03-09T09:13:05 <Bosmon> I imagine in the case where this lookup gets deoptimised, the runtime generates some of its own garbage by converting a struct into a dictionary
2017-03-09T09:13:21 <Bosmon> And then becomes confused in its overall time accounting between execution time and GC time
2017-03-09T09:13:57 <stegru> is thast because it\'s being modified, by the delete statement?
2017-03-09T09:14:03 <Bosmon> stegru - yes
2017-03-09T09:14:17 <stegru> take that out of the loop?
2017-03-09T09:14:18 <Bosmon> In my readings about V8 internals, as soon as you do a delete on an object, it deoptimises it forever
2017-03-09T09:14:28 <Bosmon> Well how can I take it out of the loop, it\'s the whole point of the loop :)
2017-03-09T09:14:30 <javjarfer> ufff forever??
2017-03-09T09:14:38 <Bosmon> Well sure, it\'s what I want
2017-03-09T09:14:42 <Bosmon> This object *is* being used as a dictionary
2017-03-09T09:14:53 <Bosmon> But V8\'s first guess about every object is that it is not
2017-03-09T09:15:14 <Bosmon> It will try to treat it as somehing that belongs in its inline cache, until you use it in a way which is inconsistent with that
2017-03-09T09:15:22 <stegru> no, replace it with a deleteTheseAfter.push(context)
2017-03-09T09:15:39 <Bosmon> That it, either i) you use a pattern of keys that is too large/unfamiliar, or ii) call a delete on it
2017-03-09T09:15:52 <Bosmon> That would just generate even more garbage of my own
2017-03-09T09:16:10 <Bosmon> In addition to the system\'s garbage
2017-03-09T09:16:35 <Bosmon> It\'s not the loop that\'s deoptimised, its the storage of "childrenScope"
2017-03-09T09:16:39 <Bosmon> I mean, the loop is deoptimised too
2017-03-09T09:16:44 <Bosmon> But the effect of that is negligible
2017-03-09T09:16:54 <Bosmon> I replaced it with a for (var in x) loop and it made essentially no difference
2017-03-09T09:17:08 <Bosmon> I then added a "hasOwnProperty" check and it made it significantly worse : P
2017-03-09T09:18:02 <stegru> I wonder if the parentShadow.childrenScope lookup is also taking some time
2017-03-09T09:18:11 <Bosmon> Yes, I think it is
2017-03-09T09:18:24 <Bosmon> But not all that much time
2017-03-09T09:18:34 <Bosmon> My feeling is that Firefox\'s profiler\'s view of this function is closer to the truth
2017-03-09T09:19:24 <stegru> isn\'t that like going with weather.com\'s forcast because it\'s more favourable than bbc\'s?
2017-03-09T09:19:43 <colinclark> hahaha
2017-03-09T09:20:20 <Bosmon> Well there is such a thing as "impossible weather" : P
2017-03-09T09:20:31 <Bosmon> Hashtable lookup should take a few tens of ns
2017-03-09T09:20:51 <stegru> but if it\'s being modified then it may need to be rebuilt
2017-03-09T09:21:02 <stegru> (i\'m thinking in general, don\'t know about JS)
2017-03-09T09:21:13 <Bosmon> Well sure
2017-03-09T09:21:17 <Bosmon> But what option do I have : P
2017-03-09T09:21:23 <Bosmon> The whole point of this structure was to be an optimisation :)
2017-03-09T09:21:34 <stegru> heh
2017-03-09T09:21:44 <Bosmon> We incur hashtable read/write costs at this site, to avoid appalling read costs everywhere else
2017-03-09T09:21:55 <colinclark> Is it possible to retain the shape of the dictionary by using some kind of marker value in place of actual deletions, or will this dictionary end up accumulating the entire universe over time?
2017-03-09T09:22:08 <Bosmon> colinclark - we musn\'t
2017-03-09T09:22:19 <Bosmon> Because all these hashtables are chained together prototypally
2017-03-09T09:22:25 <colinclark> ah!
2017-03-09T09:22:27 <Bosmon> If there is a null, it would be a "stone for all time"
2017-03-09T09:23:05 <javjarfer> and of course we also can\'t to hint the type because Ecmascript doesn\'t support that yet true?
2017-03-09T09:23:18 <colinclark> no
2017-03-09T09:23:19 <Bosmon> Right
2017-03-09T09:23:31 <colinclark> "no" as in true :)
2017-03-09T09:23:32 <Bosmon> But I just don\'t think the profiler is being serious
2017-03-09T09:23:42 <javjarfer> colinclark, haha :)
2017-03-09T09:23:54 <colinclark> my personal experience with the Chrome profiler is that it is completely insane
2017-03-09T09:24:08 <Bosmon> It\'s simply impossible that V8\'s implementation of hashtables is so bad
2017-03-09T09:24:18 <colinclark> My favourite was when I was took profiles of the same application under the same circumstances on my Macbook and on a Raspberry Pi
2017-03-09T09:24:24 <colinclark> and the profiles were just COMPLETELY different
2017-03-09T09:24:26 <Bosmon> Especially given that its performance is overall 4x faster than Firefox for the same benchmark
2017-03-09T09:24:38 <colinclark> there is no way the difference in architecture could have caused it
2017-03-09T09:24:55 <Bosmon> So I am just going to try to eliminate garbage overall, and hope/expect that as I do so this "fake hotspot" will gradually go away
2017-03-09T09:25:02 <Bosmon> In proportion with the cost of general system GC
2017-03-09T09:25:02 <colinclark> is it possible that because this object is prototypal, it\'s simply not being optimized as a plain dictionary?
2017-03-09T09:25:35 <Bosmon> colinclark - I don\'t think there is any such thing as "being optimised as a plain dictionary" since behaving as a dictionary is the absolute ghetto of performance already
2017-03-09T09:25:50 * the-t-in-rtf joined the channel
2017-03-09T09:25:50 <Bosmon> The lookup simply couldn\'t be slower than treating the scope as a dictionary
2017-03-09T09:25:51 <javjarfer> colinclark, yes, this kind of huge runtimes can really behave strangely, specially dynamic typing ones xD
2017-03-09T09:25:56 <Bosmon> But that was exactly what was intended here
2017-03-09T09:26:13 <Bosmon> These will be some of the slowest property lookups that are possible in JS
2017-03-09T09:26:28 <Bosmon> But they were designed that way, in order to substitute for operations which are far more expensive : P
2017-03-09T09:27:00 <colinclark> ha
2017-03-09T09:27:03 <colinclark> fair enough
2017-03-09T09:27:06 <Bosmon> This appallingly slow operation here is what gave us "fast invokers" 2 years ago
2017-03-09T09:27:15 <stegru> for the sake of learning, do you have code handy that reproduces this?
2017-03-09T09:27:21 <Bosmon> stegru, yes
2017-03-09T09:27:44 <javjarfer> Bosmon, so we need to optimize a lookup, without being able to prevent the system to pre-optimize, without being able to look to the actual dictionary implementation that is doing
2017-03-09T09:28:29 <Bosmon> javjarfer - I guess that hinting that it is a dictionary to start with would speed the overall process, yes
2017-03-09T09:28:50 <Bosmon> But I think that the loss of time in deoptimising in practice is not that huge
2017-03-09T09:29:02 <Bosmon> stegru - this is my general go-to "low-level framework benchmarks" file
2017-03-09T09:29:03 <Bosmon> https://github.com/fluid-project/infusion/blob/master/tests/manual-tests/framework/core/performance-fastInvokers/js/performance-test.js#L125
2017-03-09T09:29:14 <Bosmon> So, comment out line 123, and uncomment line 125
2017-03-09T09:29:18 <Bosmon> And you will get the test I am running
2017-03-09T09:29:47 <Bosmon> Which demonstrates that the cost of constructing essentially the most minimal Infusion component is quite appallingly somewhere between 1-4ms
2017-03-09T09:29:50 <javjarfer> Bosmon, I will also like to run that test xD
2017-03-09T09:30:07 <Bosmon> We need to be able to make this on the order of 100-1000x faster
2017-03-09T09:30:13 <Bosmon> By some variety of appalling voodopo
'

