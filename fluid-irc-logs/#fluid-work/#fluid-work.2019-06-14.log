2019-06-14T00:07:57  *** colinclark <colinclark!~colinclar@192-0-159-124.cpe.teksavvy.com> has joined #fluid-work
2019-06-14T00:08:03  *** colinclark <colinclark!~colinclar@192-0-159-124.cpe.teksavvy.com> has quit IRC (Client Quit)
2019-06-14T01:30:54  *** danayo_ <danayo_!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has joined #fluid-work
2019-06-14T01:42:18  *** sepidehshahi <sepidehshahi!~sepidehsh@205.211.168.101> has joined #fluid-work
2019-06-14T01:43:20  *** sepidehshahi <sepidehshahi!~sepidehsh@205.211.168.101> has quit IRC (Client Quit)
2019-06-14T02:15:43  *** danayo_ <danayo_!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has quit IRC (Quit: danayo_)
2019-06-14T03:22:03  *** greatislander <greatislander!uid364905@gateway/web/irccloud.com/x-bwyovrcwswiftwyv> has quit IRC (*.net *.split)
2019-06-14T03:38:48  *** greatislander <greatislander!uid364905@gateway/web/irccloud.com/x-bwyovrcwswiftwyv> has joined #fluid-work
2019-06-14T03:59:25  *** danayo <danayo!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has joined #fluid-work
2019-06-14T04:11:37  *** danayo <danayo!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has quit IRC (Quit: danayo)
2019-06-14T04:12:15  *** danayo_ <danayo_!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has joined #fluid-work
2019-06-14T04:22:44  *** danayo_ <danayo_!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has quit IRC (Quit: danayo_)
2019-06-14T04:24:08  *** danayo_ <danayo_!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has joined #fluid-work
2019-06-14T04:37:02  *** danayo_ <danayo_!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has quit IRC (Quit: danayo_)
2019-06-14T04:41:35  *** danayo_ <danayo_!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has joined #fluid-work
2019-06-14T05:12:24  *** danayo_ <danayo_!~danayo@S0106f81d0f5cda43.vc.shawcable.net> has quit IRC (Quit: danayo_)
2019-06-14T07:27:24  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:389a:893:80fd:e975> has joined #fluid-work
2019-06-14T07:36:38  *** kris_HA <kris_HA!~yanachkov@185.97.75.80> has joined #fluid-work
2019-06-14T08:12:42  <the-t-in-rtf> mor-ning
2019-06-14T08:13:03  <the-t-in-rtf> @bosmon, I am testing the changes Cindy proposed here at the moment.
2019-06-14T08:13:16  <the-t-in-rtf> https://issues.gpii.net/browse/GPII-3969
2019-06-14T08:13:32  <the-t-in-rtf> I suspect that alone will get us back to the point where the smoke tests pass
2019-06-14T08:13:57  <the-t-in-rtf> I was thinking of putting in a pull just for that and working to deploy that while the larger performance issues with validation are addressed
2019-06-14T08:29:33  <Bosmon> the-t-in-rtf - well, not a lot of point, since these only address the case of the tests rather than actual performance when in production
2019-06-14T08:30:16  <the-t-in-rtf> it's fair, I'll just label that commit within the larger effort.
2019-06-14T08:30:33  <Bosmon> No point in addressing the issue by gaming the tests : P
2019-06-14T08:31:24  <the-t-in-rtf> I do think the tests need to be discussed in more depth once we get beyond this.
2019-06-14T08:31:39  <the-t-in-rtf> i.e. they could better represent the range of activities that are likely
2019-06-14T08:33:25  <the-t-in-rtf> and yes, we shouldn't game the test.  I was more confirming whether we were only hitting that endpoint at the moment
2019-06-14T08:34:13  <the-t-in-rtf> the other endpoints are for saving changes to settings, not sure whether the QSS makes use of those?
2019-06-14T08:38:19  <the-t-in-rtf> I mean, until we have accounts or the idea that someone can take their settings across multiple machines, are we even saving settings to the cloud?
2019-06-14T08:39:05  <the-t-in-rtf> also gauging the urgency, if next week is fine for a broader fix, happy to just submit the one.
2019-06-14T08:40:43  <the-t-in-rtf> well the three, one against gpii-json-schema, one against universal, one against gpii-infra
2019-06-14T08:41:02  <the-t-in-rtf> instead of the five (two for the partial fix, three for the real deal)
2019-06-14T08:55:47  <Bosmon> the-t-in-rtf - settings are always being saved to the cloud
2019-06-14T08:55:51  <Bosmon> That is the entire purpose of the system?
2019-06-14T08:56:45  <the-t-in-rtf> I wondered if there was something else going on until we have proper users.  I guess we're using a machine identifier?
2019-06-14T08:56:55  <Bosmon> Yes
2019-06-14T08:57:07  <Bosmon> You may recall the entire scandal surrounding our security model for the NOVA pilots
2019-06-14T08:59:51  <Bosmon> It doesn't use a machine identifier, it makes use of the local Windows account id
2019-06-14T09:22:31  <the-t-in-rtf> I might also not require it.  A lot of things are like "where I parked my bike yesterday", I just let them go.
2019-06-14T09:22:34  <the-t-in-rtf> thanks for reminding me.
2019-06-14T09:22:44  <the-t-in-rtf> s/require/recall/
2019-06-14T09:23:01  <the-t-in-rtf> Anyway, I do remember enough of yesterday's conversation to have made a start on the validator component
2019-06-14T09:23:25  <the-t-in-rtf> I also remember how pleased I was with myself to have made pure static functions.
2019-06-14T09:23:31  <the-t-in-rtf> ugh.
2019-06-14T09:24:36  <the-t-in-rtf> I remember now why I did that, but it's fine
2019-06-14T09:25:02  <the-t-in-rtf> I just need something that compiles the GSS and something that validates against compiled GSS and then I can remix those
2019-06-14T09:25:21  <the-t-in-rtf> for example the schema validated component is only going to make one pass at validation on startup, and shouldn't bother with caching
2019-06-14T09:25:34  <the-t-in-rtf> where the model one should cache its validator.
2019-06-14T09:26:52  <the-t-in-rtf> it does kind of dampen my enthusiasm for using schema validated components everywhere, their startup suffers from the same performance penalty
2019-06-14T09:27:06  <the-t-in-rtf> so for example we shouldn't use them with components dynamically created per request
2019-06-14T09:47:28  <Bosmon> the-t-in-rtf - in practice, the schema and validation apparatus should be held elsewhere - on a component whose identity does not vary with respect to the one being validated
2019-06-14T09:47:45  <Bosmon> This will be similar to how the "new new new" framework will work
2019-06-14T09:48:03  <Bosmon> Just because you need "a" component to do the validation doesn't mean it should be the one which is currently constructing
2019-06-14T09:48:13  <Bosmon> THis is what I was trying to get at with the idea of a "schema holding" component
2019-06-14T09:48:16  <the-t-in-rtf> yes, I guess I could use a bit more input on that
2019-06-14T09:48:31  <the-t-in-rtf> I mean, how can the validator prevent the component startup?
2019-06-14T09:48:46  <the-t-in-rtf> or is that a special case where it still does it itself?
2019-06-14T09:49:14  <Bosmon> There will still be a workflow action on the component currently instantiating, which is capable of tanking it
2019-06-14T09:49:35  <the-t-in-rtf> yes, but that refers to a static function or something and not the new validator
2019-06-14T09:49:46  <the-t-in-rtf> or are we proposing that a validator would live somewhere global?
2019-06-14T09:50:12  <Bosmon> Well, it will have to be somewhere "global-ish"
2019-06-14T09:50:24  <Bosmon> I imagine we will have a special "pen" of cached validator components
2019-06-14T09:50:37  <Bosmon> Each of which know how to validate "something"
2019-06-14T09:50:52  <Bosmon> And if the thing to be currently validated matches one of them, we will fish it out and ask it to do its thing
2019-06-14T09:51:07  <the-t-in-rtf> how do we determine the match?
2019-06-14T09:51:28  <the-t-in-rtf> md5 sum of the stringified schema?
2019-06-14T09:51:39  <Bosmon> Well, in Infusion, this would be relatively easy, since we would just look at the grade content of the "schema holder"
2019-06-14T09:51:49  <Bosmon> But yes, if we are just dealing in terms of pure schemas, we could try a hash
2019-06-14T09:52:10  <Bosmon> If, however, we insist that the unit of reuse of a schema is a grade, the matching becomes easier
2019-06-14T09:52:22  <Bosmon> Assuming, of course, the grade content hasn't changed since the last time we looked
2019-06-14T09:52:32  <the-t-in-rtf> what happens to the grade content when someone instantiates a grade with options?
2019-06-14T09:52:45  <the-t-in-rtf> i.e. what happens if someone passes in new rules without making a new grade?
2019-06-14T09:53:05  <the-t-in-rtf> is there some implicit grade in those cases?
2019-06-14T09:53:20  <Bosmon> Well, that's a very good point - in the "new new new" framework I imagine we'd have to allocate some kind of "nonce grade" holding the options
2019-06-14T09:53:29  <Bosmon> But it's an interesting point that this then makes the resulting material non-cachable
2019-06-14T09:53:38  <Bosmon> So perhaps some kind of "fast hash" is a better plan
2019-06-14T09:54:29  <Bosmon> Given the reason we are doing this in the first place is to address performance issues, we will probably want a more performant hash than a crypto one
2019-06-14T09:54:57  <Bosmon> First hit via Googling is https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript
2019-06-14T09:55:29  <Bosmon> It will also be much faster to compute the hash "structurally" by iterating over the schema in-memory rather than stringifying it
2019-06-14T09:57:27  <the-t-in-rtf> so how do I iterate in a stable way, i.e. ensure that { foo: true, bar: true } has the same has as {bar: true, foo: true}?
2019-06-14T09:57:40  <Bosmon> Just pass the output of Object.keys() to sort()
2019-06-14T09:57:48  <the-t-in-rtf> right, that's what I was thinking
2019-06-14T09:57:57  <Bosmon> I believe Justin has such a thing anyway
2019-06-14T09:58:44  <the-t-in-rtf> a link would be useful
2019-06-14T09:58:53  <the-t-in-rtf> I could also use a bit of guidance about semi-globality?
2019-06-14T09:58:56  <Bosmon> I was in the very process of digging it up : P
2019-06-14T09:59:04  <Bosmon> It appears to be in this mothballed pull request
2019-06-14T09:59:05  <Bosmon> https://github.com/fluid-project/infusion/pull/566/files#diff-ce65b74e18811491f3cd6be95ac827b6R475
2019-06-14T09:59:45  <Bosmon> I imagine there will be a global component which herds such things called "ValidatorCacheRoot" or so, and it will have one dynamic component child for each of these cached schema checker components
2019-06-14T10:00:29  <Bosmon> I guess Justin's thing doesn't actually compute a "hash" as such, just a very long string
2019-06-14T10:00:37  <Bosmon> But the effect is rather similar : P
2019-06-14T10:00:59  <Bosmon> You could always feed such a thing into the algo listed in the SO post in order to digest it
2019-06-14T10:01:50  <the-t-in-rtf> why would it need to have a component child?
2019-06-14T10:02:05  <Bosmon> one for each cached validator
2019-06-14T10:02:16  <the-t-in-rtf> why not just store them in memory?
2019-06-14T10:02:24  <the-t-in-rtf> i.e. as a member variable
2019-06-14T10:02:47  <Bosmon> Yes, you could also do that
2019-06-14T10:03:03  <Bosmon> Probably best given we are worrying about tarpitting the whole component tree
2019-06-14T10:03:23  <the-t-in-rtf> yes, I was thinking of yesterday's conversation
2019-06-14T10:03:43  <the-t-in-rtf> so, I could use a bit more on how to properly stash the global component
2019-06-14T10:04:09  <the-t-in-rtf> and how to cleanly fail if someone manages to require part of the code base but not the bit that registers the global component
2019-06-14T10:04:24  <the-t-in-rtf> I assume there are patterns for stuff like this in infusion itself.
2019-06-14T10:04:26  <Bosmon> You can give it the special "fluid.resolveRootSingle" grade to make it globally resolvable
2019-06-14T10:04:54  <the-t-in-rtf> OK, I will read up on that.
2019-06-14T10:05:12  <the-t-in-rtf> what's the best way to recover Justin's work?
2019-06-14T10:05:25  <Bosmon> the-t-in-rtf - I think you can just use it for "general inspiration"
2019-06-14T10:05:43  <the-t-in-rtf> OK, I'll make a workalike with a TODO to discuss pulling the pattern up if needed.
2019-06-14T10:06:33  <Bosmon> It's a shame JS doesn't make it easy or performant to work with greater than 32 bit integers
2019-06-14T10:08:09  <Bosmon> And one only has to convert the damn things back into strings again in order to use them as keys anyway....
2019-06-14T10:08:22  <Bosmon> Perhaps there is some cunning algorithm for digesting longer strings into shorter ones : P
2019-06-14T10:09:35  <the-t-in-rtf> I could just zip the content and base64 encode it
2019-06-14T10:09:39  <the-t-in-rtf> :P
2019-06-14T10:09:42  <Bosmon> Yes, hilarious
2019-06-14T10:09:59  <Bosmon> In any case, the JS port of Java StringHash looks like it will be just fine enough to get us bootstrapped
2019-06-14T10:10:00  <Bosmon> https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/22429679
2019-06-14T10:10:04  <Bosmon> We can worry about the niceties later
2019-06-14T10:11:14  <the-t-in-rtf> OK, I will start there, de-this and de-prototype it
2019-06-14T10:12:00  <the-t-in-rtf> it may take longer to deliver this approach than the bodge I was working on, but most components will be much simpler as a result.
2019-06-14T10:21:51  <Bosmon> Here's an interesting study - https://softwareengineering.stackexchange.com/questions/49550/which-hashing-algorithm-is-best-for-uniqueness-and-speed
2019-06-14T10:22:01  <Bosmon> Unfortunately the source code for any of the systems which are any good is huge
2019-06-14T10:22:36  <the-t-in-rtf> so, I'm looking at Justin's pull
2019-06-14T10:22:42  <the-t-in-rtf> how is that faster than JSON .stringify?
2019-06-14T10:22:48  <the-t-in-rtf> I mean, it uses JSON .stringify under the hood.
2019-06-14T10:23:09  <the-t-in-rtf> line 498
2019-06-14T10:23:17  <Bosmon> the-t-in-rtf - only for individual primitive values
2019-06-14T10:23:32  <Bosmon> Yes, you may just like to call stringify
2019-06-14T10:23:46  <Bosmon> Although I don't believe the output of that is guaranteed to be unique
2019-06-14T10:23:46  <the-t-in-rtf> Since keys are already strings, I really suspect there's not much difference.
2019-06-14T10:23:51  <the-t-in-rtf> ah, right
2019-06-14T10:23:56  <Bosmon> That is, it will not sort the keys
2019-06-14T10:23:58  <the-t-in-rtf> I still need to do the key sorting we discussed
2019-06-14T10:24:16  <the-t-in-rtf> OK, that's enough of a reason to improve on Justin's approach
2019-06-14T10:24:44  <Bosmon> And of course the output will be a tad shorter
2019-06-14T10:25:01  <Bosmon> I'm thinking perhaps we might just do without the hashing, the risks of a collision would just be too awful
2019-06-14T10:26:12  <the-t-in-rtf> is there a max length on a JS key?
2019-06-14T10:26:21  <Bosmon> the-t-in-rtf - none that we need worry about
2019-06-14T10:26:42  <Bosmon> 2^27 characters
2019-06-14T10:26:46  <the-t-in-rtf> yes
2019-06-14T10:26:50  <the-t-in-rtf> I suspect we're reading the same article
2019-06-14T10:27:37  <the-t-in-rtf> https://stackoverflow.com/questions/13367391/is-there-a-limit-on-length-of-the-key-string-in-js-object
2019-06-14T10:29:17  <the-t-in-rtf> the hot network questions on SO are just bonkers
2019-06-14T10:29:29  <the-t-in-rtf> magic the gathering, office politics, arguing SF plots
2019-06-14T10:29:35  <Bosmon> All of this is starting to make it look more and more that we might want to just make individual settings the unit of our validation reuse, since they will cache their validators hugely better
2019-06-14T10:29:55  <the-t-in-rtf> I dunno
2019-06-14T10:30:16  <the-t-in-rtf> I mean, schema validated model components are not likely to be very useful unless they can benefit from something like this
2019-06-14T10:30:50  <the-t-in-rtf> but my initial concept of a "validator" is just a thing that holds onto a single schema and its compiled equivalent
2019-06-14T10:31:19  <the-t-in-rtf> the only reason I think a root validator is more interesting is that it makes per-request validation a bit cleaner
2019-06-14T10:31:37  <the-t-in-rtf> but we could just have the middleware involved handle the caching
2019-06-14T10:32:18  <the-t-in-rtf> I also do like that multiple instances of the same grade are likely to benefit
2019-06-14T10:32:37  <the-t-in-rtf> i.e. the first component with a given schema incurs the 200ms penalty for compilation
2019-06-14T10:33:36  <the-t-in-rtf> and everyone else is much much faster
2019-06-14T10:33:55  <the-t-in-rtf> well, maybe not 200
2019-06-14T10:34:28  <the-t-in-rtf> 200 is for the whole first request
2019-06-14T10:35:08  <the-t-in-rtf> looking through my notes, looks like 90% of the validation time is eliminated once the schema is compiled and cached.
2019-06-14T10:35:32  <the-t-in-rtf> I guess you're worrying about the root validator becoming bloated with entries over time?
2019-06-14T10:38:28  <Bosmon> Yes, we can cross that bridge later
2019-06-14T10:38:37  <Bosmon> Especially if we aren't creating an Infusion component per validator
2019-06-14T10:39:37  <the-t-in-rtf> a root validator and unique stringify gives us the option to even avoid componentising settings and just pass in their content.
2019-06-14T10:40:17  <the-t-in-rtf> but I guess we want to componentise them to enable different reuse strategies anyway
2019-06-14T10:42:15  <the-t-in-rtf> but I guess we're back to schema holders for reuse and combination and a global validator for the actual validation
2019-06-14T10:48:44  <the-t-in-rtf> OK, Justin's docs for fluid.toHashKey seem to be outdated, they claim that the typeof will be included, but it doesn't seem to be.
2019-06-14T10:49:22  <the-t-in-rtf> I guess it'll need to be
2019-06-14T10:52:35  <the-t-in-rtf> hmm, or not, as long as it can be fed back into JSON.parse.
2019-06-14T11:07:05  <the-t-in-rtf> hmm, his original approach would have failed on deep mixtures of objects and arrays
2019-06-14T11:07:10  <the-t-in-rtf> (Justin's)
2019-06-14T11:07:32  <the-t-in-rtf> he recursed correctly through deep objects, but didn't handle arrays that might contain objects.
2019-06-14T11:07:47  <the-t-in-rtf> it's very relevant for schemas in that you have anyOf and other language elements that commonly use that
2019-06-14T11:07:52  <the-t-in-rtf> I have an improved approach.
2019-06-14T12:05:00  *** the-t-in-rtf <the-t-in-rtf!~Adium@2a02:a210:2142:3480:1988:add1:5ad:3fec> has quit IRC (Quit: Leaving.)
2019-06-14T12:10:57  *** the-t-in-rtf <the-t-in-rtf!~Adium@2a02:a210:2142:3480:e9fb:72e2:e515:a6> has joined #fluid-work
2019-06-14T12:11:12  *** jhung <jhung!~jhung@CPE54a0505a5e09-CMa84e3f431590.cpe.net.cable.rogers.com> has joined #fluid-work
2019-06-14T12:57:52  *** cindyli <cindyli!~Adium@198.52.178.28> has joined #fluid-work
2019-06-14T13:16:31  *** cherylhjli <cherylhjli!~Adium@205.211.168.104> has joined #fluid-work
2019-06-14T13:30:30  *** jhung is now known as jhung_away
2019-06-14T13:51:47  *** sepidehshahi <sepidehshahi!sepidehsha@nat/ocadu/x-auyhvyffkgqfldtu> has joined #fluid-work
2019-06-14T14:13:56  *** jhung_away is now known as jhung
2019-06-14T14:14:05  *** michelled <michelled!~Adium@205.211.168.105> has joined #fluid-work
2019-06-14T14:14:56  *** clown <clown!clown@nat/ocadu/x-phzqcyrzsijmpdpa> has joined #fluid-work
2019-06-14T14:18:36  *** avtar <avtar!uid113407@gateway/web/irccloud.com/x-jxcblriflazvxkdr> has joined #fluid-work
2019-06-14T14:18:37  *** colinclark <colinclark!~colinclar@192-0-158-138.cpe.teksavvy.com> has joined #fluid-work
2019-06-14T14:28:22  *** kris_HA <kris_HA!~yanachkov@185.97.75.80> has quit IRC (Ping timeout: 245 seconds)
2019-06-14T14:30:15  *** colinclark <colinclark!~colinclar@192-0-158-138.cpe.teksavvy.com> has quit IRC (Quit: colinclark)
2019-06-14T14:31:50  *** colinclark <colinclark!~colinclar@192-0-158-138.cpe.teksavvy.com> has joined #fluid-work
2019-06-14T14:44:18  *** simonjb <simonjb!~simonjb@198.178.118.18> has joined #fluid-work
2019-06-14T16:01:56  *** cherylhjli <cherylhjli!~Adium@205.211.168.104> has quit IRC (Quit: Leaving.)
2019-06-14T17:03:02  *** the-t-in-rtf <the-t-in-rtf!~Adium@2a02:a210:2142:3480:e9fb:72e2:e515:a6> has quit IRC (Quit: Leaving.)
2019-06-14T17:16:13  *** cherylhjli <cherylhjli!Adium@nat/ocadu/x-foeiwzbthhisdeja> has joined #fluid-work
2019-06-14T17:16:23  *** cherylhjli <cherylhjli!Adium@nat/ocadu/x-foeiwzbthhisdeja> has quit IRC (Client Quit)
2019-06-14T17:22:18  *** michelled <michelled!~Adium@205.211.168.105> has quit IRC (Quit: Leaving.)
2019-06-14T17:22:32  *** colinclark <colinclark!~colinclar@192-0-158-138.cpe.teksavvy.com> has quit IRC (Quit: colinclark)
2019-06-14T17:23:55  *** the-t-in-rtf <the-t-in-rtf!~Adium@2a02:a210:2142:3480:d846:296c:9319:3411> has joined #fluid-work
2019-06-14T17:47:05  *** cherylhjli <cherylhjli!Adium@nat/ocadu/x-wdgdmmscyjaujrrp> has joined #fluid-work
2019-06-14T17:58:21  *** avtar <avtar!uid113407@gateway/web/irccloud.com/x-jxcblriflazvxkdr> has quit IRC (Quit: Connection closed for inactivity)
2019-06-14T18:02:02  *** simonjb <simonjb!~simonjb@198.178.118.18> has quit IRC ()
2019-06-14T18:45:15  *** michelled <michelled!~Adium@205.211.168.105> has joined #fluid-work
2019-06-14T18:46:03  *** simonjb <simonjb!~simonjb@205.211.168.103> has joined #fluid-work
2019-06-14T18:46:31  *** cherylhjli1 <cherylhjli1!~Adium@205.211.168.104> has joined #fluid-work
2019-06-14T18:49:48  *** cherylhjli <cherylhjli!Adium@nat/ocadu/x-wdgdmmscyjaujrrp> has quit IRC (Ping timeout: 272 seconds)
2019-06-14T18:50:00  *** cherylhjli1 <cherylhjli1!~Adium@205.211.168.104> has quit IRC (Client Quit)
2019-06-14T18:59:40  *** avtar <avtar!uid113407@gateway/web/irccloud.com/x-cyuahguovzhxtjkk> has joined #fluid-work
2019-06-14T19:12:28  *** sepidehshahi_ <sepidehshahi_!~sepidehsh@205.211.168.101> has joined #fluid-work
2019-06-14T19:13:07  *** colinclark <colinclark!~colinclar@205.211.168.104> has joined #fluid-work
2019-06-14T19:14:40  *** sepidehshahi <sepidehshahi!sepidehsha@nat/ocadu/x-auyhvyffkgqfldtu> has quit IRC (Ping timeout: 248 seconds)
2019-06-14T19:14:41  *** sepidehshahi_ is now known as sepidehshahi
2019-06-14T19:14:48  *** sepidehshahi <sepidehshahi!~sepidehsh@205.211.168.101> has quit IRC (Client Quit)
2019-06-14T19:18:46  *** sepidehshahi <sepidehshahi!~sepidehsh@205.211.168.101> has joined #fluid-work
2019-06-14T19:42:28  *** colinclark <colinclark!~colinclar@205.211.168.104> has quit IRC (Quit: colinclark)
2019-06-14T19:43:59  *** jhung is now known as jhung_away
2019-06-14T19:48:05  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:389a:893:80fd:e975> has quit IRC (Remote host closed the connection)
2019-06-14T19:48:13  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:389a:893:80fd:e975> has joined #fluid-work
2019-06-14T19:48:51  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:389a:893:80fd:e975> has quit IRC (Remote host closed the connection)
2019-06-14T19:48:59  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:389a:893:80fd:e975> has joined #fluid-work
2019-06-14T19:49:00  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:389a:893:80fd:e975> has quit IRC (Remote host closed the connection)
2019-06-14T19:49:29  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:389a:893:80fd:e975> has joined #fluid-work
2019-06-14T19:53:55  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:389a:893:80fd:e975> has quit IRC (Ping timeout: 250 seconds)
2019-06-14T20:06:16  *** sepidehshahi <sepidehshahi!~sepidehsh@205.211.168.101> has quit IRC (Quit: sepidehshahi)
2019-06-14T20:06:45  *** sepidehshahi <sepidehshahi!~sepidehsh@205.211.168.101> has joined #fluid-work
2019-06-14T20:12:47  *** jhung_away is now known as jhung
2019-06-14T20:23:04  *** cindyli <cindyli!~Adium@198.52.178.28> has quit IRC (Quit: Leaving.)
2019-06-14T20:24:22  *** sepidehshahi <sepidehshahi!~sepidehsh@205.211.168.101> has quit IRC (Quit: sepidehshahi)
2019-06-14T20:28:44  *** colinclark <colinclark!~colinclar@205.211.168.104> has joined #fluid-work
2019-06-14T20:31:59  *** michelled1 <michelled1!~Adium@205.211.168.105> has joined #fluid-work
2019-06-14T20:31:59  *** michelled <michelled!~Adium@205.211.168.105> has quit IRC (Read error: Connection reset by peer)
2019-06-14T20:41:04  *** colinclark <colinclark!~colinclar@205.211.168.104> has quit IRC (Quit: colinclark)
2019-06-14T20:50:25  *** jhung <jhung!~jhung@CPE54a0505a5e09-CMa84e3f431590.cpe.net.cable.rogers.com> has quit IRC (Ping timeout: 268 seconds)
2019-06-14T20:57:39  *** cherylhjli <cherylhjli!~Adium@toroon0949w-lp130-03-65-93-16-149.dsl.bell.ca> has joined #fluid-work
2019-06-14T20:58:11  *** clown <clown!clown@nat/ocadu/x-phzqcyrzsijmpdpa> has quit IRC (Quit: Leaving.)
2019-06-14T21:00:06  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:2052:df8f:cc74:2a6e> has joined #fluid-work
2019-06-14T21:01:43  *** cherylhjli <cherylhjli!~Adium@toroon0949w-lp130-03-65-93-16-149.dsl.bell.ca> has quit IRC (Client Quit)
2019-06-14T21:02:55  *** cherylhjli <cherylhjli!~Adium@toroon0949w-lp130-03-65-93-16-149.dsl.bell.ca> has joined #fluid-work
2019-06-14T21:04:34  *** jhernandez <jhernandez!~jhernande@2a02:a03f:3e25:d200:2052:df8f:cc74:2a6e> has quit IRC (Ping timeout: 258 seconds)
2019-06-14T21:32:58  *** Bosmon <Bosmon!~a@82-71-9-15.dsl.in-addr.zen.co.uk> has quit IRC (Ping timeout: 245 seconds)
2019-06-14T21:40:49  *** colinclark <colinclark!~colinclar@205.211.168.104> has joined #fluid-work
2019-06-14T21:47:15  *** colinclark <colinclark!~colinclar@205.211.168.104> has quit IRC (Quit: colinclark)
2019-06-14T21:58:19  *** simonjb <simonjb!~simonjb@205.211.168.103> has quit IRC ()
2019-06-14T21:58:56  *** michelled1 <michelled1!~Adium@205.211.168.105> has quit IRC (Quit: Leaving.)
2019-06-14T22:54:21  *** simonjb <simonjb!~simonjb@198.178.118.18> has joined #fluid-work
2019-06-14T22:54:59  *** simonjb <simonjb!~simonjb@198.178.118.18> has quit IRC (Client Quit)
2019-06-14T23:08:07  *** cherylhjli <cherylhjli!~Adium@toroon0949w-lp130-03-65-93-16-149.dsl.bell.ca> has quit IRC (Quit: Leaving.)
2019-06-14T23:08:23  *** cherylhjli <cherylhjli!~Adium@toroon0949w-lp130-03-65-93-16-149.dsl.bell.ca> has joined #fluid-work
2019-06-14T23:08:49  *** cherylhjli <cherylhjli!~Adium@toroon0949w-lp130-03-65-93-16-149.dsl.bell.ca> has quit IRC (Client Quit)
