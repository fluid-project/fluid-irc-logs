2020-10-14T11:04:09  <Justin_o> Bosmon, the-t-in_: What's the difference between kettle and fluid-express? And is it hard to convert from one to the other?
2020-10-14T11:54:39  <Bosmon> Justin_o - https://github.com/fluid-project/fluid-express#how-is-this-different-from-kettle
2020-10-14T11:58:52  <Justin_o> Bosmon: I looked over that briefly yesterday. Is that current with the latest versions of kettle? It sounded like story telling for example may fit better with fluid-express because of the UI it serves, but not sure. During the storytelling check in I was reflecting back on the conversation from the preferences server meeting. Wondering if we should be thinking of moving away from kettle in the future. But more
2020-10-14T11:58:52  <Justin_o> specifically in terms of the work for the account creation that needs to happen for both prefs server and story telling.
2020-10-14T11:59:23  <Bosmon> Justin_o - well, primarily fluid-express helps with UIs which are rendered with fluid-handlebars
2020-10-14T11:59:28  <Justin_o> If it was possible to collaborate on or share back work that we do for storytelling regarding account creation.
2020-10-14T11:59:45  <Bosmon> Which was a kind of "long-term stop-gap" which the-t-in_ produced for people who wanted to build server-rendered UIs before the new renderer was ready
2020-10-14T12:00:53  <Bosmon> I see that SJRK does indeed use fluid-handlebars so I expect fluid-express is a good match for it, together with fluid-express-user for the user management
2020-10-14T12:01:09  <Justin_o> Bosmon: ah okay.. so storytelling does use fluid-handlebars but I believe all the rendering is currently client side.
2020-10-14T12:01:51  <Justin_o> Bosmon: would all the sever tests need to be rewritten? I believe they are using the kettle testing framework right now
2020-10-14T12:01:55  <Bosmon> On the other hand, I'm not sure that fluid-express will be able to be much supported in future, depending on the-t-in_ 's workload, but I expect that kettle can at least be "lightly" supported
2020-10-14T12:02:11  <Bosmon> Justin_o - fluid-express also uses the kettle testing framework (or at least bits of it) for its testing
2020-10-14T12:03:29  <Justin_o> Bosmon: thanks.. okay, so if we look long term and skip over the short term requirement of the user authentication, would your suggestion be to keep storytelling using kettle or move to just using express directly ( this isn't something we'd do in the immediate term ).
2020-10-14T12:03:44  <Bosmon> Well, that's a great question
2020-10-14T12:03:57  <Bosmon> Especially considering what the long term roadmap for SJRK is in itself
2020-10-14T12:04:29  <Bosmon> E.g. for questions like whether we want it to remain based on Couch at all, or not
2020-10-14T12:05:45  <Bosmon> I think we should watch to see what happens as joseph begins to implement the new prefs server, possibly in "plain express"
2020-10-14T12:05:55  <Bosmon> And see if anything like a set of "express plus some conventions" emerges from that work
2020-10-14T12:08:02  <Justin_o> Bosmon: that makes sense thanks..
2020-10-14T12:08:51  <Bosmon> In practice, kettle, fluid-express, and plain express are strongly oriented around the notion of "express middleware" in any case
2020-10-14T12:08:57  <Justin_o> Bosmon: so for the short term, I'm guessing there may be less opportunity to share work regarding account creation, but perhaps there will be some overlap in design and code pieces here and there.
2020-10-14T12:09:06  <Bosmon> So it shouldn't be a huge amount of work to move the central configuration from any one to any other of them
2020-10-14T12:10:37  <Bosmon> A sort of separate issue is working with things like DataSources
2020-10-14T12:11:02  <Bosmon> We'd always hoped that one of the spinoffs of converting the GPII to Postgres was that this would make time to develop a set of Postgres DataSources
2020-10-14T12:11:06  <Bosmon> But in practice this didn't happen
2020-10-14T12:11:27  <Bosmon> If it had done, this might have been a way to ease migrating SJRK off CouchDB to Postgres, if we ended up wanting to do that
2020-10-14T12:12:19  <Bosmon> I think there are probably some more arguments for keeping SJRK in some way Infusion based, than there are for the "new preferences server"
2020-10-14T12:12:42  <Bosmon> Since the latter, I think, is going to be a very fixed-function thing that does a pretty stably specified and minimal job
2020-10-14T12:13:02  <Bosmon> Whereas SJRK is always going to be something that we might want to make more flexible in some open-ended kinds of ways
2020-10-14T12:20:08  <Justin_o> Bosmon: yes, we do want it to be configurable for different instances; which may or may not be hosted by us.
2020-10-14T12:34:21  <Justin_o> gmoss: you may be interested in the conversation above.
2020-10-14T14:29:16  *** clown is now known as clown_mtg
2020-10-14T14:34:37  <gmoss> Bosmon Justin_o: excellent discussion, and you touched on many of the points from our conversation during Storytelling check-in yesterday.
2020-10-14T14:36:01  <gmoss> Bosmon: indeed, it would be in keeping with the ethos of the project to keep the codebase more readily configurable by non-programmers, and for that reason I'm wary of going with totally plain express, but there may be some middle ground between that and what we've got now.
2020-10-14T14:38:11  <gmoss> Also, FWIW, the Storytelling Tool currently uses fluid-handlebars to do the rendering client-side, but it would be nice to use it more "properly" and get a bit of server templating going (SJRK-52 captures this effort), and to take better advantage of handlebars' dynamic updating features in a way we aren't currently doing
2020-10-14T16:02:30  *** clown_mtg is now known as clown
2020-10-14T16:05:34  <Justin_o> jhung, greatislander: I think we should look into and think about where we'd like to track issues for the ILDH. It looks like we have it tracked in JIRA in three different projects and also in GitHub issues.
2020-10-14T16:08:17  <gmoss> Justin_o jhung greatislander: FWIW, this time last year, my plan was to use the "ILDH" Jira project. That said I might be more inclined to use GitHub Issues if I were working on it now
2020-10-14T16:22:16  <jhung> There definitely needs to be some Jira gardening. I wouldn't mind using GH issues to make it inline with our other web projects.
2020-10-14T16:22:29  <jhung> ^ Justin_o
2020-10-14T16:22:49  <jhung> (heading offline shortly)
2020-10-14T16:22:59  <Justin_o> jhung: that seems reasonable
2020-10-14T16:23:20  <Justin_o> I also keep getting the design guide and ildh issues confused, so having them more self contained would probably help me too
2020-10-14T16:23:39  <greatislander> jhung Justin_o gmoss I tend to agree that for these website projects we should use GH issues
2020-10-14T17:42:51  *** sepidehshahi_ is now known as sepidehshahi
