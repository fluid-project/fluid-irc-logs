2020-07-15T13:28:45  <the-t-in_> So, if no one minds, I wanted to talk about something between tech and philosophy related to some of the conversations we've had around making an IDE for Fluid components.
2020-07-15T13:29:04  <the-t-in_> it's kind of tech, but it's also kind of fluid-philosophy, which we should totally have as a channel
2020-07-15T13:29:26  <the-t-in_> I was reading about a couple of synths like this one:
2020-07-15T13:29:26  <the-t-in_> https://www.engadget.com/sensel-morph-mpe-midi-controller-pure-data-synth-130027112.html
2020-07-15T13:29:50  <the-t-in_> They use "Pure Data" to let people make their own code visually
2020-07-15T13:30:02  <the-t-in_> https://puredata.info
2020-07-15T13:31:08  <the-t-in_> I didn't spend too long with it, but really didn't like it vs. any of the other visual coding environments I've seen.
2020-07-15T13:31:58  <the-t-in_> my biggest beef with it is the horrible opacity of it
2020-07-15T13:32:10  <the-t-in_> like, you seriously have to dig to even find out what objects exist
2020-07-15T13:32:22  <the-t-in_> and good luck figuring out what their inputs, outputs actually mean
2020-07-15T13:34:49  <the-t-in_> I was thinking about scratch, where the controls are all right there, and where the inputs and outputs are all much more visible and immediate
2020-07-15T13:37:16  <the-t-in_> And then I was thinking about using FSS or another schema-like construct to describe valid inputs and available outputs.
2020-07-15T13:38:43  <the-t-in_> With that you could generate a UI that presented a list of components and allowed you to wire them together.
2020-07-15T13:47:44  <Bosmon> Yes, for sure
2020-07-15T13:48:20  <Bosmon> We were always meant to circle back and implement "types" again - only this time, on the outside of the system rather than on the inside
2020-07-15T13:49:12  <Bosmon> As we discovered, JSON schema works well enough for describing simple primitive types such as ranges and enums
2020-07-15T13:49:24  <Bosmon> But rapidly gets out of its depth when asked to deal with more complex, reusable structures
2020-07-15T13:50:22  <Bosmon> Also some long-ago work that was "left on the table" was described at our ancient Linz meetup
2020-07-15T13:50:41  <Bosmon> Part of the central value of the Model Transformation system was that it was meant to be able to give you "schemas for free" as well as "inverses for free"
2020-07-15T13:51:14  <Bosmon> That is, if you knew that the input of something was a number in the range 0 to 1, and you had passed it through fluid.transforms.linearScale(2, 1), it should be able to tell you that the schema for the output was a number in the range 1 to 3
2020-07-15T13:52:29  <Bosmon> But part of our approach to "plug-compatibility" was always to be suggestive, rather than prescriptive
2020-07-15T13:52:55  <Bosmon> The traditional approach to types says, "The thing which plugs here obeys contract X, unless I can prove that it satisfies this I am not even going to let you trye"
2020-07-15T13:52:57  <Bosmon> trye
2020-07-15T13:53:39  <Bosmon> Whereas I expect we are going to say something more like, "Things which historically have been successful, or we have some other reason to believe will plug here are of type X, but feel free to try plugging other stuff in here and we will do our best to show you what happens"
2020-07-15T15:06:06  <the-t-in_> Yes, that's kind of what I was thinking about the basic/advanced stuff I was describing to you.
2020-07-15T15:06:44  <the-t-in_> i.e. the recommended accepted values are a kind of curated layer for easy use, but you can always nip behind the curtain and choose to pass something else
2020-07-15T15:07:08  <the-t-in_> so that you're not blocked by poorly written contracts that actually can accept things their authors didn't consider
2020-07-15T15:07:20  <the-t-in_> contracts for components that can accept
2020-07-15T15:08:19  <the-t-in_> so in your words, "things that we have reason to believe will plug here" are the gentle guard rails that help people make at least something earlier
2020-07-15T17:02:58  <Bosmon> the-t-in_ - absolutely, yes
2020-07-15T17:03:06  <Bosmon> I think the "gentle guard rails" is just the right idiom
2020-07-15T17:03:21  <Bosmon> But in practice we want the system to be able to speculate (safely) about ... "anything"
2020-07-15T17:04:02  <Bosmon> Part of the goals of the new framework is to allow a clearer model for this kind of speculation - "What would the component tree look like if I asked you to do X"?
2020-07-15T17:04:16  <Bosmon> And not be committed to all the horrific consequences of X if it turned out to be a not so good m ove
2020-07-15T17:04:19  <Bosmon> move
2020-07-15T17:05:03  <Bosmon> The virtue of schemas is that they allow for cheap tests that can recommend against certain things without much CPU cost
2020-07-15T17:06:48  <the-t-in_> very interesting
2020-07-15T17:07:07  <the-t-in_> I wish you would do another preso like your lenses one in Crete on the new framework
2020-07-15T17:07:38  <the-t-in_> even if you would be repeating much of it I could stand to hear it again in the context of the new world
